@using Domain.Models
@model Ramp.Contracts.ViewModel.CustomerSelfSignUpViewModel

@{
    var portalContext = PortalContext.Current;
    var loginImageUrl = Url.Content("~/Content/images/Login/onramp_login.png");
    var loginLogoUrl = Url.Content("~/images/logo.png");
    var companywebsite = AppSettings.Urls.Marketting.AsUrl();
    if (portalContext != null && portalContext.UserCompany != null) {
        if (!string.IsNullOrWhiteSpace(portalContext.UserCompany.WebsiteAddress)) {
            companywebsite = !portalContext.UserCompany.WebsiteAddress.StartsWith("http://", StringComparison.InvariantCultureIgnoreCase) ? string.Format("http://{0}", portalContext.UserCompany.WebsiteAddress) : portalContext.UserCompany.WebsiteAddress;
        }

        if (portalContext.UserCompany.CustomerConfigurations.Count > 0) {
            var customerConfiguration = portalContext.UserCompany.CustomerConfigurations;
            var loginImage = customerConfiguration.Where(x => x.Type == CustomerConfigurationType.LoginLogo && (!x.Deleted.HasValue || (x.Deleted.HasValue && !x.Deleted.Value))).OrderBy(x => x.Version).LastOrDefault();
            var loginLogo = customerConfiguration.Where(x => x.Type == CustomerConfigurationType.DashboardLogo && (!x.Deleted.HasValue || (x.Deleted.HasValue && !x.Deleted.Value))).OrderBy(x => x.Version).LastOrDefault();
            if (loginImage != null && loginImage.UploadModel != null) {
                loginImageUrl = "data:image/png;base64," + Convert.ToBase64String(loginImage.UploadModel.Data);
            }
            if (loginLogo != null && loginLogo.UploadModel != null) {
                loginLogoUrl = "data:image/png;base64," + Convert.ToBase64String(loginLogo.UploadModel.Data);
            }
        }
    }
    Layout = null;
    //ViewBag.Title = portalContext.Name + "Lost Password";
    ViewBag.Title = "OnRAMP Online Training Platform";
    var version = System.Reflection.Assembly.GetAssembly(typeof(Web.UI.App_Start.RampSecurityConfig)).GetName().Version.ToString();
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <title>@ViewBag.Title</title>

    @Styles.Render("~/bundles/css")
    <link href="~/Content/admin.css?v=@version" rel="stylesheet" />
    @Scripts.Render("~/bundles/js")
    @Html.Partial("_NotifyPartial")
    <style>
        @Html.Raw(portalContext.EmbedCss())
        .splashImage {
            background: url(@loginImageUrl) no-repeat center top;
            -webkit-background-size: cover;
            -moz-background-size: cover;
            -o-background-size: cover;
            background-size: cover;
        }

            .requiredTxt {
            border: solid red;
        }

    .modal-login {		
		max-width: 450px;
	}

    .modal-login .modal-content {
        padding:45px;
		border-radius: 50px;
	}
	.modal-login .modal-header {
		border-bottom: none;   
        position: relative;
        justify-content: center;
	}
	.modal-login.modal-dialog {
		margin-top: 80px;
	}

    .modal-backdrop{
       backdrop-filter: blur(5px);
       background-color: rgba(0, 0, 0, 0.58);
    }
    .modal-backdrop.in{
       opacity: 1 !important;
    }


    </style>




</head>
<body class="container-fluid splashImage">

    <div id="self-signupmodal" class="modal fade padding:30px;">
        <div class="modal-dialog modal-login">
            <div class="modal-content">

                <div class="login-col">

                    <a href="@companywebsite" target="_blank" title="Click here for more info" style="padding:0">
                        <img class="onramp-logo center-block img-responsive" src="@loginLogoUrl" />

                    </a>
                    <br />

                    <p>Please enter your details in the fields provided to create your user account:</p>


                    @using (Html.BeginForm("CustomerUserSelfSignUp", "CustomerMgmt", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        <br />
                        <div class="row">
                            <div class="col-sm-12">

                                <i>All mandatory fields are marked with <span style="color:red;">*</span></i>

                            </div>
                        </div><br />
                        <div class="row">
                            <div class="col-sm-12">



                                <div class="form-group">
                                    <label><span style="color:red;">*</span> Full Name</label>
                                    @Html.TextBoxFor(model => model.FullName, new { @class = "form-control requiredClass", @placeholder = "Full Name", style = "max-width:none" })
                                </div>


                                <div class="form-group">
                                    <label>ID Number</label>
                                    @Html.TextBoxFor(model => model.IDNumber, new { @class = "form-control", @placeholder = "ID Number", style = "max-width:none" })
                                </div>


                                @if (Model.IsEnabledEmployeeCode) {
                                    <div class="form-group">
                                        <label><span id="spnEmpCode"><span style="color:red;">*</span></span> Employee code</label>
                                        @Html.TextBoxFor(model => model.EmployeeNo, new { @class = "form-control", @placeholder = "Employee Number", style = "max-width:none" })
                                    </div>
                                }

                                <div class="form-group">
                                    <label><span style="color:red;">*</span> Email Address</label>
                                    @Html.TextBoxFor(model => model.EmailAddress, new { @onblur = "fnCheckEmailExist()", @class = "form-control requiredClass", @placeholder = "Email Address", style = "max-width:none" })
                                    <span id="spnEmailAlreayExist" style="color:red;">This email address is already in use in the OnRAMP system, please enter a unique email address</span>
                                    <span class="error" style="color:red;" id="invalid_email">The email you entered is invalid</span>
                                </div>


                                <div class="form-group">
                                    <label>Mobile Number</label>
                                    @Html.TextBoxFor(model => model.MobileNumber, new { @class = "form-control", @placeholder = "Mobile Number", style = "max-width:none", @onkeypress = "return onlyNumbers(event);" })
                                </div>



                                <div class="form-group">
                                    <label><span style="color:red;">*</span> Gender</label>
                                    @Html.DropDownListFor(model => model.Gender, Model.GenderDropDown, "Gender", new { @class = "form-control requiredClass", style = "max-width:none" })
                                </div>

                                <div class="form-group">
                                    <label><span style="color:red;">*</span> Password</label>
                                    @Html.TextBoxFor(model => model.Password, new { @type = "password", @class = "form-control requiredClass", @placeholder = "Password", style = "max-width:none" })
                                    <span style="color:red;" id="spnPasswordlength">The password must be at least 6 characters long.</span>
                                </div>

                                <div class="form-group">
                                    <label><span style="color:red;">*</span> Confirm Password</label>
                                    @Html.TextBoxFor(model => model.ConfirmPassword, new { @type = "password", @class = "form-control requiredClass", @placeholder = "Confirm Password", style = "max-width:none" })
                                    <span style="color:red;" id="txtErrorForPwd">The password and confirm password do not match.</span>
                                </div>
                            </div>

                        </div>


                        @Html.HiddenFor(model => model.CompanyId)
                        <br /> <br />

                        <input type="submit" value="Create My Account" onclick="return checkValidation();" class="center-block btn btn-lg btn-primary" style="max-width:none;width:100%" /><p><br /></p>
                        <a href="~/">  <input type="button" value="Back to Login" class="center-block btn btn-lg btn-primary pull-left" style="max-width:none;width:100%"></a>

                    }
                </div>

                <br />  <br />
                <div class="row footer">
                    <div class="col-sm-12">
                        <span class="small pull-left" style="color:#126960" id="text">Powered By OnRamp</span>
                        <img class="onramp-logo-mini img-responsive pull-right" id="logo" src="@Url.Content("~/images/logo.png")" />
                    </div>
                </div>

                @if (ViewBag.ErrMessage != null) {

                    @:<script>notif({ msg: "<b>Success :</b> This email address is already in use in the OnRAMP system, please enter a unique email address", type: "success", });</script>
                }

            </div>
        </div>
    </div>
         
    <script type="text/javascript">
        $(window).on('load', function () {
            $('#self-signupmodal').modal('show');
        });
    </script>


    <script type="text/javascript">


        $('#self-signupmodal').modal({
    backdrop: 'static',
    keyboard: false
})
        var enabledEmpCode = '@Model.IsEnabledEmployeeCode';
        var checkEmpCode = '@Model.IsEmpCodeRequired';
        function checkPwdLength() {
            if ($("#Password").val()!='' && $("#Password").val().length < 6) {
                $('#spnPasswordlength').show();
                $("#Password").addClass('requiredTxt');
            } else {
                $('#spnPasswordlength').hide();
                $("#Password").removeClass('requiredTxt');
            }
        }
        function requiredClass() {
            $('.requiredClass').each(function () {
                var val = $(this).val();
                if (val === '' || val === null || val === undefined) {
                    $(this).addClass('requiredTxt');

                } else {
                    $(this).removeClass('requiredTxt');
                }
            });
        }

        function checkPassword() {
            var pwd = $("#Password").val();
            var cpwd = $("#ConfirmPassword").val();
            $("#txtErrorForPwd").hide();
            if (pwd && cpwd) {
                if (pwd !== cpwd) {
                    $("#txtErrorForPwd").show();
                    $("#ConfirmPassword").addClass('requiredTxt');
                } else {
                    $("#txtErrorForPwd").hide();
                    $("#ConfirmPassword").removeClass('requiredTxt');
                }
            }
        }

        //Except only numbers for textbox
        function onlyNumbers(event) {
            var charCode = (event.which) ? event.which : event.keyCode;
            if (charCode > 31 && (charCode < 48 || charCode > 57))
                return false;

            return true;
        }

        function isEmail(email) {
            var regex = /^([a-zA-Z0-9_.+-])+\@@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;

            return regex.test(email);
        }

        function fnCheckEmailExist() {

            var email = $('#EmailAddress').val();
           
                if (isEmail(email)) {
                          
                         var promise = $.get("@Url.Action("DoesEmailAlreadyPresent", "CustomerMgmt", new { area= "CustomerManagement" })", {
                             EmailAddress: email
                         });

                         promise.done(function (data) {
                             if (data == true) {
                                 
                                 $('#spnEmailAlreayExist').show();
                                 $('#EmailAddress').addClass('requiredTxt');
                                 $('#invalid_email').hide();
                                 checkEmailAlready = true;
                             } else {
                                 
                                 $('#spnEmailAlreayExist').hide();
                                 $('#EmailAddress').removeClass('requiredTxt');
                                 $('#invalid_email').hide();
                                 checkEmailAlready = false;
                             }
                         });
                         promise.fail(function (jqXHR, textStatus, errorThrown) {
                             console.error(errorThrown);
                             // $("#hdnCheckEmail").innerHTML = errorThrown;
                         });
                         promise.always(function () {
                             // $("#Email1").removeClass("spinner");
                            
                         });

                     } else {
                         $('#invalid_email').show();
                         $('#spnEmailAlreayExist').hide();
                    $('#EmailAddress').addClass('requiredTxt');
                   
                     }
        }


        function checkValidation() {

            var flag = true;
            checkPassword();
            checkPwdLength();
            requiredClass();

            if (enabledEmpCode == true || enabledEmpCode === 'true' || enabledEmpCode === 'True') {
                if (checkEmpCode == true || checkEmpCode === 'true' || checkEmpCode === 'True') {
                    var empCode = $('#EmployeeNo').val();
                    if (empCode === "" || empCode === null) {

                        $('#EmployeeNo').addClass('requiredTxt');
                        flag = false;
                    }
                    else {
                        $('#EmployeeNo').removeClass('requiredTxt');
                    }
                }
            }

            if (!isEmail($('#EmailAddress').val())) {
                $('#EmailAddress').addClass('requiredTxt');
                flag = false;
            }
            $('.requiredClass').each(function () {
                if ($(this).hasClass('requiredTxt')) {
                    flag = false;
                }

            });
            if (flag == false) {
                notif({ msg: "<b>Warning :</b> " + 'Please ensure that all required fields filled', type: "error", multiline: true });
            }
            return flag;

        }

        $(function () {

            if (enabledEmpCode == true || enabledEmpCode === 'true' || enabledEmpCode === 'True') {
                if (checkEmpCode == true || checkEmpCode === 'true' || checkEmpCode === 'True') {
                    $('#EmployeeNo').addClass('requiredClass');
                    $('#spnEmpCode').show();
                } else {
                    $('#EmployeeNo').removeClass('requiredClass');
                    $('#spnEmpCode').hide();
                }
            }

            $("#Password").blur(function () {
                var pwd = $(this).val();
                if(pwd!=null && pwd!='')
                    checkPwdLength();
                checkPassword();
                    
            });

            $("#ConfirmPassword").blur(function () {
              
                    checkPassword();
            });
            $('#EmailAddress').val('');
            $('#spnEmailAlreayExist').hide();
            $("#txtErrorForPwd").hide();
            $('#spnPasswordlength').hide();
            $('#spnMessageEmpCode').hide();
            $('#invalid_email').hide();
            $('.requiredClass').blur(function () {
                if ($('#EmailAddress').val() === "" || $('#EmailAddress').val() === null) {
                    $('#spnEmailAlreayExist').hide();
                }
                var val = $(this).val();
                if (val === '' || val === null || val === undefined) {
                    $(this).addClass('requiredTxt');
                    $('#spnEmailAlreayExist').hide();

                } else {
                    $(this).removeClass('requiredTxt');
                }
            });

                      

            $('body').css('padding', 0);
            _adjustFooter();
            $(window).on('resize', _adjustFooter);
            $('form').on('submit', _adjustFooter);
            function _adjustFooter() {
                if (($(window).height() - $('.form').height() - $('.onramp-logo').height()) < $('#footer').height() + 20) {
                    $('#footer').removeClass('signiture');
                } else {
                    $('#footer').addClass('signiture');
                }
                return true;
            }
        });
    </script>
</body>
</html>