@using Common.Web
@using Web.UI.Code.Extensions
@{
    Layout = null;
}

<style>
        #jstree-marker {
            z-index: 1100;
        }

        #manageCategoriesModal {
            overflow-x: auto;
        }

            #manageCategoriesModal .modal-dialog {
                display: table;
            }

        .policy-icon {
            background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.PolicyType], true)') !important;
            -ms-background-size: 24px;
            background-size: 24px;
            -ms-background-position: 0 !important;
            background-position: 0 !important;
        }

        .memo-icon {
            background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.MemoType], true)') !important;
            -ms-background-size: 24px;
            background-size: 24px;
            -ms-background-position: 0 !important;
            background-position: 0 !important;
        }

        .test-icon {
            background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.TestType], true)') !important;
            -ms-background-size: 24px;
            background-size: 24px;
            -ms-background-position: 0 !important;
            background-position: 0 !important;
        }

        .training-manual-icon {
            background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.TrainingManualType], true)') !important;
            -ms-background-size: 24px;
            background-size: 24px;
            -ms-background-position: 0 !important;
            background-position: 0 !important;
        }

        .checklist-icon {
            background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.CheckListType], true)') !important;
            -ms-background-size: 24px;
            background-size: 24px;
            -ms-background-position: 0 !important;
            background-position: 0 !important;
        }

        .form-inline .twitter-typeahead {
            width: auto;
            float: none;
            vertical-align: middle;
        }

        .document-panelbody {
            max-height: 468px;
            overflow-y: auto;
            padding: 0;
        }

            .document-panelbody > table {
                margin: 0;
            }

        .spacer {
            margin-top: 6em;
        }

        .hover-zoom {
            zoom: 1;
        }

            .hover-zoom:hover {
                -ms-transition: transform .15s ease-in-out;
                -o-transition: transform .15s ease-in-out;
                -webkit-transition: transform .15s ease-in-out;
                -ms-transition: transform .15s ease-in-out;
                -o-transition: transform .15s ease-in-out;
                -webkit-transition: transform .15s ease-in-out;
                transition: transform .15s ease-in-out;
                transform: scale(1.1)
            }

        .not-selected, .not-selected > img {
            zoom: 1;
            filter: alpha(opacity=50);
            -ms-opacity: 0.5;
            opacity: 0.5;
        }

            .not-selected:hover, .not-selected > img:hover {
                filter: alpha(opacity=100);
                -ms-opacity: 1;
                opacity: 1;
                -ms-transition: all .15s ease-in-out;
                -o-transition: all .15s ease-in-out;
                -webkit-transition: all .15s ease-in-out;
                transition: all .15s ease-in-out;
                -ms-transform: scale(1.1);
                -webkit-transform: scale(1.1);
                transform: scale(1.1)
            }

        .no-underline:hover, .no-underline:focus {
            text-decoration: none;
        }

        .panel-container > div.panel:last-child {
            margin-bottom: 0;
        }

        .selected {
            background-color: #666;
            color: #fff;
        }

        .title {
            width: 80%;
            float: left;
            font-weight: bold;
            padding: 8px;
            border: 1px solid #ddd;
            margin: 0px 0px 0px 0px
        }

        .noOfUsers {
            width: 20%;
            float: right;
            font-weight: bold;
            padding: 8px;
            border: 1px solid #ddd;
            margin: 0px 0px 0px 0px
        }

        .title-value {
            width: 80%;
            float: left;
            border: 1px solid #ddd;
            padding: 1px;
            line-height: 1.42857143;
            background-color: #f9f9f9
        }

        .untitle-value {
            width: 80%;
            float: left;
            border: 1px solid #ddd;
            padding: 8px;
            line-height: 1.42857143;
            background-color: #f9f9f9
        }

        .noOfUsers-value {
            width: 20%;
            float: right;
            border: 1px solid #ddd;
            padding: 8px;
            line-height: 1.42857143;
            background-color: #f9f9f9
        }

        table th {
            position: sticky;
            top: 0;
            z-index: 1;
            background: #ededed;
        }
</style>

<link href="~/Scripts/themes/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/Scripts/themes/bootstrap-multiselect.js"></script>
<script src="~/Scripts/jstree.js"></script>
<link href="~/Content/jstree/dist/themes/default/style.css" rel="stylesheet" />

<script src="~/Scripts/jquery-ui.js"></script>
<link href="~/Content/jquery-ui/themes/base/jquery-ui.css" rel="stylesheet" />
<script src="~/Scripts/app/extension.common.js"></script>
<style>
     .policy-icon {
            background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.PolicyType], true)') !important;
            -ms-background-size: 24px;
            background-size: 24px;
            -ms-background-position: 0 !important;
            background-position: 0 !important;
        }

        .memo-icon {
            background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.MemoType], true)') !important;
            -ms-background-size: 24px;
            background-size: 24px;
            -ms-background-position: 0 !important;
            background-position: 0 !important;
        }

        .test-icon {
            background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.TestType], true)') !important;
            -ms-background-size: 24px;
            background-size: 24px;
            -ms-background-position: 0 !important;
            background-position: 0 !important;
        }

        .training-manual-icon {
            background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.TrainingManualType], true)') !important;
            -ms-background-size: 24px;
            background-size: 24px;
            -ms-background-position: 0 !important;
            background-position: 0 !important;
        }

        .checklist-icon {
            background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.CheckListType], true)') !important;
            -ms-background-size: 24px;
            background-size: 24px;
            -ms-background-position: 0 !important;
            background-position: 0 !important;
        }

</style>

<form id="summaryForm">
    <div class="modal-header modalSearch">
        <h4 class="modal-title">You are about to complete your workflow</h4>
    </div>
    <div class="modal-body">
        <p class="title">Title<span data-bind="text: vm1.WorkflowName"></span> </p>

        @*rearrange code start*@
    @*<div data-bind="foreach:vm1.DocumentsInJSTree, uiSortableList: vm1.DocumentsInJSTree">
        <p class="title-value">
            <span style='max-width: 50px'>
                <a class='btn'><span title="Hold and drag to rearrange" class='glyphicon glyphicon-sort uploadhandle' style='color: black'></span></a>
            </span>
            <img class="img-circle document-icon" style="width:20px" data-bind="attr: {src: vm1.getImage(type)}" />
            <span data-bind="text: text"></span>
        </p>
        <p data-bind="text: vm1.selectedGroups().length" class="noOfUsers-value"></p>
        <div style="border: 1px solid #ddd; padding: 8px">
            <textarea id="additionalMsg" placeholder="Add an additional message" class="additionalMsgCss" rows="4" style="max-width: 550px;" cols="100"></textarea>
        </div>
    </div>*@
        @*rearrange code end*@

    </div>
    <div class="modal-footer">
        <div class="text-center">
            <div class="btn-group">
                <button id="save" class="btn btn-primary" data-dismiss="modal">Save</button>
                <button class="btn btn-default">Cancel</button>
            </div>
        </div>
    </div>
</form>



<script>

     
   @*getImage = function (type) {
        console.log("type from get image ", type);
        switch (type) {
            case "TrainingManual":
                return '@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.TrainingManualType], true)';
            case "Test":
                return '@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.TestType], true)';
            case "Policy":
                return '@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.PolicyType], true)';
            case "Memo":
                return '@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.MemoType], true)';
            case "Checklist":
                return '@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.CheckListType], true)';
            default:
                return '';
        }
    }*@

    $("#save").click(() => {

        var docs = [];
        vm1.DocumentsInJSTree().forEach((d) => {
            docs.push({
                Id: d.id,
                Title: d.text,
                Type: d.type,
                Order: vm1.DocumentsInJSTree().findIndex(r => r.id === d.id),
                AditionalMsg: ""
            })
        });

        let data = {
            Id : null,
            WorkflowName: vm1.WorkflowName,
            SendNotiEnabled: vm1.SendNotiEnabled,
            GroupIds: vm1.selectedGroups(),
            DocumentList: docs
        }

                $('#LoadingImageDiv').show();
            var url = '@Url.Action("AddAutoAssignWorkflow")';
            $.ajax({
                    method: 'POST',
                url: url,
                data: data
                })
                .done(function (data) {
                    notif({
                        msg: 'Your progress has been saved.',
                        multiline: true,
                        type: 'success'
                    });
                    window.location.reload()
                })
                .always(function() {
                    $('#LoadingImageDiv').hide();
                });
    });

     self.applyChanges = function () {

                var additionalMsgs = "";
                var orderId = [];
                $('.additionalMsgCss').each(function () {
                    var msg = $(this).val();
                    var id = $(this).attr('role');
                    orderId.push(id);
                    if (additionalMsgs == "") {
                        additionalMsgs = id + '~' + msg;
                    } else {
                        additionalMsgs = additionalMsgs + "^" + id + '~' + msg;
                    }
                   
                });

                //new code start
                var selectedUsersPerDocument = $.map(selectedUsers,
                    function (item) {
                        var reorderIndex = orderId.indexOf(item.documentId)

                        if ($('#multiDateSelect').val() != null) {
                            self.docAssignDate = $('#multiDateSelect').val();
                        }
                        return {
                            DocumentId: item.documentId,
                            DocumentType: item.documentType,
                            UserId: item.userId,
                            AssignedDate: self.docAssignDate,
                            AdditionalMsg: additionalMsgs.toString(),
                            MultipleAssignedDates: $('#multiDateSelect').val(),
                            OrderNumber: reorderIndex
                        };
                    });
                console.log("selected", selectedUsersPerDocument);
               
                selectedUsersPerDocument.sort(function (a, b) {
                    return a.OrderNumber - b.OrderNumber;
                });

                var url = self.selectedAction() === 'Assign'
                    ? '@Url.Action("AssignDocumentsToUsers", "Send", new {Area = ""})'
                    : '@Url.Action("UnassignDocumentsFromUsers", "Send", new {Area = ""})';

                if (self.selectedAction() === 'Reassign') {
                    url = '@Url.Action("ReassignDocumentsToUsers", "Send", new {Area = ""})';
                }
                $('#LoadingImageDiv').show();

                $.ajax({
                    method: 'POST',
                    url: url,
                    data: {
                        data: selectedUsersPerDocument
                    }
                }).done(function (data) {
                    if (self.selectedAction() === 'Reassign') {
                        notif({
                            msg: '<b>Success -</b> Successfully reassign documents',
                            type: 'success'
                        });
                    } else {
                        notif({
                            msg: '<b>Success -</b> Successfully ' +
                                (self.selectedAction() === 'Assign' ? 'assigned' : 'unassigned') +
                                ' documents',
                            type: 'success'
                        });
                    }

                    // Clear page selections
                    self.selectedUsersPerDocument.removeAll();
                    self.selectedDocuments.removeAll();
                    $('.selectpicker').selectpicker('deselectAll');
                    self.selectedTypes.removeAll();
                    self.selectedAction(null);
                    //$('#actionModal').modal('show');
                    window.location.reload();
                }).fail(function () {
                    if (self.selectedAction() === 'Assign') {
                        notif({
                            msg: '<b>Error -</b> Error Assigning documents',
                            type: 'error'
                        });
                    } else {
                        notif({
                            msg: '<b>Error -</b> Failed to ' +
                                (self.selectedAction() === 'Reassign' ? 'reassign' : 'unassign' + ' documents'),
                            type: 'error'
                        });
                    }
                    window.location.reload();
                }).always(function () {
                    $('#LoadingImageDiv').hide();
                });
            }
</script>
