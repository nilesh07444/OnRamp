@using Ramp.Contracts.ViewModel
@using Common.Web
@using Web.UI.Code.Extensions
@using Domain.Customer.Models
@using Domain.Enums

@model TrainingActivityModel
@{
    Layout = "~/Views/Shared/_LayoutStandardUser.cshtml";
}
<style>
    .form-control{
        max-width:none;
    }
    .input-group{
        max-width:none;
        width:100%;
    }
    .bootstrap-tagsinput {
        max-width: none;
        width: 100%;
        margin-bottom: 0;
        padding: 0;
    }
    button.validation-error {
        border-color: #a94442;
        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
        box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
    }
</style>
<div>
    <div class="col-lg-12">
        <h1 class="page-header" data-bind="text:$root.mode() + ' Training Activity'"></h1>
        <div class="panel panel-info">
            <div class="panel-heading">
                <span>Training Activity Details</span>
            </div>
            <div class="panel-body">
                <form>
                    <div class="row">
                        <div class="col-sm-12" data-bind="with:data">
                            <div class="col-sm-4">
                                <div class="form-group">
                                    <label class="control-label">Title</label>
                                    <input type="text" class="form-control" name="Title" data-bind="textInput:Title,validatewith:$root.errors" placeholder="Title" />
                                </div>
                                <div class="form-group">
                                    <label class="control-label">Date Range</label>
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <div class="input-group">
                                                <input type="text" name="From" class="form-control" autocomplete="off" aria-describedby="calender-addon" data-placement="top" data-bind="datetimepicker:From,validatewith:$root.errors" placeholder="From" />
                                                <span class="input-group-addon" id="calender-addon"><i class="fa fa-calendar"></i></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <div class="input-group">
                                                <input type="text" name="To" class="form-control" autocomplete="off" aria-describedby="calender-addon" data-placement="top" data-bind="datetimepicker:To,validatewith:$root.errors" placeholder="To" />
                                                <span class="input-group-addon" id="calender-addon"><i class="fa fa-calendar"></i></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label">Select</label>
                                    <div>
                                        <div class="btn-group btn-group-justified">
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-default" name="ConductedBy" data-bind="click:$root.modal.search.trainer.open.bind(), validatewith:$root.errors">Trainers <span class="glyphicon glyphicon-user"></span></button>
                                            </div>
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-default" name="UsersTrained" data-bind="click:$root.modal.search.trainee.open.bind(), validatewith:$root.errors">Trainees <span class="glyphicon glyphicon-user"></span></button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label">Reward Points</label>
                                    <input type="text" class="form-control" name="RewardPoints" data-bind="value:RewardPoints,validatewith:$root.errors" placeholder="Reward Points" />
                                </div>
                                <!-- ko ifnot:BursaryTrainingActivityDetail -->
                                <div class="form-group">
                                    <label class="control-label">Additional Info</label>
                                    <textarea class="form-control" name="AdditionalInfo" data-bind="textInput:AdditionalInfo,validatewith:$root.errors" placeholder="Additional Info" style="max-width:none;width:100%;height:120px"></textarea>
                                </div>
                                <!-- /ko -->
                                <!-- ko if:BursaryTrainingActivityDetail -->
                                <div class="form-group">
                                    <label class="control-label">Additional Info</label>
                                    <textarea class="form-control" name="AdditionalInfo" data-bind="textInput:AdditionalInfo,validatewith:$root.errors" placeholder="Additional Info" style="max-width:none;width:100%;height:203px"></textarea>
                                </div>
                                <!-- /ko -->
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    <label class="control-label">Description</label>
                                    <input type="text" class="form-control" name="Description" data-bind="textInput:Description,validatewith:$root.errors" placeholder="Description" />
                                </div>
                                <div class="form-group">
                                    <label class="control-label">Type</label>
                                    <select class="form-control" readonly disabled data-bind="options:$root.TrainingActivityTypes,
                                                            optionsText:'Text',
                                                            optionsValue:'Value',
                                                            value:TrainingActivityType"></select>
                                </div>
                                <div class="form-group">
                                    <label class="control-label">Cost Implication</label>
                                    <input type="number" class="form-control" name="CostImplication" data-bind="value:CostImplication,validatewith:$root.errors" placeholder="Cost Implication" />
                                </div>
                                <div class="form-group">
                                    <label class="control-label">Venue</label>
                                    <input type="text" class="form-control" name="Venue" data-bind="textInput:Venue,validatewith:$root.errors" placeholder="Venue" />
                                </div>
                                <!-- ko with:BursaryTrainingActivityDetail -->
                                <div class="form-group">
                                    <label class="control-label">Bursary Type</label>
                                    <input type="text" class="form-control" id="BursaryType" name="BursaryTrainingActivityDetail.BursaryType" data-bind="value:BursaryType,valueUpdate:['typeahead:selected','change','keyup'],validatewith:$root.errors" style="width:100%;max-width:none" placeholder="BursaryType" />
                                </div>
                                <!-- /ko -->
                                <div class="form-group">
                                    <label class="control-label">Training Labels</label>
                                    <div class="input-group">
                                        <input type="text" class="form-control" name="TrainingLabels" id="TrainingLabels" data-bind="value:TrainingLabels,valueUpdate:['typeahead:selected','change','keyup'], validatewith:$root.errors" style="width:100%;max-width:none;" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <a data-bind="click:$root.upload.open.bind()" class="label btn-primary">Add</a>
                                <div class="hidden" id="inputs"></div>
                                <ul class="nav nav-tabs">
                                    <li role="button" data-bind="css:{active : ko.unwrap($root.documentsTab)},click: function(){$root.documentsTab(true);}"><a>Documents</a></li>
                                    <li role="button" data-bind="if:$root.showInvoices,css:{active : !ko.unwrap($root.documentsTab)},click: function(){$root.documentsTab(false);}"><a>Invoices</a></li>
                                </ul>
                                <div class="panel panel-info">
                                    <div class="panel-body">
                                        <div class="table-responsive" data-bind="style:{'max-height': $root.getHeight}">
                                            <table class="table-striped" style="width:100%">
                                                <!-- ko if:ko.unwrap($root.documentsTab) -->
                                                <!-- ko ifnot:ko.unwrap($root.data.Documents).length > 0 -->
                                                <tbody>
                                                    <tr class="text-center"><td colspan="3">No Documents Uploaded</td></tr>
                                                </tbody>
                                                <!-- /ko -->
                                                <!-- ko if:ko.unwrap($root.data.Documents).length > 0-->
                                                <tbody data-bind="foreach:$root.data.Documents">
                                                    <!-- ko if:ko.unwrap(InProcess) -->
                                                    <tr class="row">
                                                        <td colspan="3" class="col-sm-12">
                                                            <div class="progress">
                                                                <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                                                                    <div class="progress-bar progress-bar-success" data-bind="style:{width:Progress}"></div>
                                                                </div>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <!-- /ko -->
                                                    <!-- ko ifnot:ko.unwrap(InProcess) -->
                                                    <tr class="row">
                                                        <td class="col-sm-2">
                                                            <img class="img-responsive center-block" data-bind="attr:{src: ThumbnailUrl}" style="max-height:50px" />
                                                        </td>
                                                        <td class="col-sm-7"><input type="text" class="form-control" data-bind="textInput:Description"></td>
                                                        <td class="col-sm-3">
                                                            <div class="row btn-group btn-group-sm">
                                                                <a class="btn btn-default" data-bind="attr:{href:Url}" target="_blank"><span class="glyphicon glyphicon-download"></span></a>
                                                                <button class="btn btn-default" data-bind="click:$root.upload.delete.document"><span class="glyphicon glyphicon-trash" style="color:red"></span></button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <!-- /ko -->
                                                </tbody>
                                                <!-- /ko -->
                                                <!-- /ko -->
                                                <!-- ko ifnot: ko.unwrap($root.documentsTab) -->
                                                <!-- ko with:$root.data.ExternalTrainingActivityDetail -->
                                                <!-- ko ifnot:ko.unwrap(Invoices).length > 0 -->
                                                <tbody>
                                                    <tr class="text-center"><td colspan="3">No Invoices Uploaded</td></tr>
                                                </tbody>
                                                <!-- /ko -->
                                                <!-- ko if:ko.unwrap(Invoices).length > 0-->
                                                <tbody data-bind="foreach: Invoices">
                                                    <!-- ko if:ko.unwrap(InProcess) -->
                                                    <tr class="row">
                                                        <td colspan="3" class="col-sm-12">
                                                            <div class="progress">
                                                                <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                                                                    <div class="progress-bar progress-bar-success" data-bind="style:{width:Progress}"></div>
                                                                </div>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <!-- /ko -->
                                                    <!-- ko ifnot:ko.unwrap(InProcess) -->
                                                    <tr class="row">
                                                        <td class="col-sm-2">
                                                            <img class="img-responsive center-block" data-bind="attr:{src: ThumbnailUrl}" style="max-height:50px" />
                                                        </td>
                                                        <td class="col-sm-7"><input class="form-control" type="text" data-bind="textInput:Description"></td>
                                                        <td class="col-sm-3">
                                                            <div class="row btn-group btn-group-sm">
                                                                <a class="btn btn-default" data-bind="attr:{href:Url}" target="_blank"><span class="glyphicon glyphicon-download"></span></a>
                                                                <button class="btn btn-default" data-bind="click:$root.upload.delete.invoice"><span class="glyphicon glyphicon-trash" style="color:red"></span></button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <!-- /ko -->
                                                </tbody>
                                                <!-- /ko -->
                                                <!-- /ko -->
                                                <!-- ko with:BursaryTrainingActivityDetail -->
                                                <!-- ko ifnot:ko.unwrap(Invoices).length > 0 -->
                                                <tbody>
                                                    <tr class="text-center"><td colspan="3">No Invoices Uploaded</td></tr>
                                                </tbody>
                                                <!-- /ko -->
                                                <!-- ko if:ko.unwrap(Invoices).length > 0-->
                                                <tbody data-bind="foreach: Invoices">
                                                    <!-- ko if:ko.unwrap(InProcess) -->
                                                    <tr class="row">
                                                        <td colspan="3" class="col-sm-12">
                                                            <div class="progress">
                                                                <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                                                                    <div class="progress-bar progress-bar-success" data-bind="style:{width:Progress}"></div>
                                                                </div>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <!-- /ko -->
                                                    <!-- ko ifnot:ko.unwrap(InProcess) -->
                                                    <tr class="row">
                                                        <td class="col-sm-2">
                                                            <img class="img-responsive center-block" data-bind="attr:{src: ThumbnailUrl}" style="max-height:50px" />
                                                        </td>
                                                        <td class="col-sm-7"><input type="text" class="form-control" data-bind="textInput:Description" /></td>
                                                        <td class="btn-group btn-group-sm">
                                                            <a class="btn btn-default" data-bind="attr:{href:Url}" target="_blank"><span class="glyphicon glyphicon-download"></span></a>
                                                            <button class="btn btn-default" data-bind="click:$root.upload.delete.invoice"><span class="glyphicon glyphicon-trash" style="color:red"></span></button>
                                                        </td>
                                                    </tr>
                                                    <!-- /ko -->
                                                </tbody>
                                                <!-- /ko-->
                                                <!-- /ko-->
                                                <!-- /ko -->
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button type="button" data-bind="click:$root.save.bind(),css:{'disabled':ko.unwrap($root.saving)}" class="btn btn-primary">Save</button>
                </form>
            </div>
        </div>
    </div>    
</div>

<div class="modal modal-fade" id="search_modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-header-custom">
               <span>Select &nbsp;</span><span data-bind="text:$root.modalHeader"></span>
            </div>
            <div class="modal-body">
                <div class="form-group" data-bind="with:$root">
                    <div class="form-group" data-bind="visible:searchTrainees">
                        <input type="text" class="form-control" name="OnRampUsers" id="OnRampUsers" placeholder="Start Typing For Search..." data-bind="value:userSearch, valueUpdate:['typeahead:selected','change','keyup']" style="width:100%;max-width:none" />
                    </div>
                    <div class="form-group" data-bind="visible:searchTrainers">
                        <input type="text" class="form-control" name="InternalTrainers" id="InternalTrainers" placeholder="Start Typing For Search..." data-bind="value:$root.userSearch, valueUpdate:['typeahead:selected','change','keyup']" />
                    </div>
                    <div class="input-group" data-bind="visible:searchExternalProviders">
                        <input type="text" class="form-control" name="ExternalTrainers" id="ExternalTrainers" placeholder="Start Typing For Search..." data-bind="value:$root.userSearch, valueUpdate:['typeahead:selected','change','keyup']" />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-default" data-bind="click:$root.modal.create.externalTrainingProvider.open.bind()">Create</button>
                        </span>
                    </div>
                </div>
                <div class="panel panel-info">
                    <div class="panel-body">
                        <div class="table-responsive" data-bind="style:{'max-height': '200px'}">
                            <table class="table-striped col-sm-12">
                                <thead>
                                    <!-- ko ifnot:$root.searchExternalProviders-->
                                    <tr>
                                        <th class="col-sm-5">Name</th>
                                        <th class="col-sm-5">Email</th>
                                        <th class="col-sm-2">Options</th>
                                    </tr>
                                    <!-- /ko -->
                                    <!-- ko if:$root.searchExternalProviders -->
                                    <tr>
                                        <th class="col-sm-10">Company Name</th>
                                        <th class="col-sm-2">Options</th>
                                    </tr>
                                    <!-- /ko -->
                                </thead>
                                <!-- ko if:ko.unwrap($root.users).length > 0 -->
                                <tbody data-bind="foreach:$root.users">
                                    <!-- ko ifnot:$root.searchExternalProviders -->
                                    <tr>
                                        <td class="col-sm-5">
                                            <span data-bind="text:Name"></span>
                                        </td>
                                        <td class="col-sm-5">
                                            <span data-bind="text:Email"></span>
                                        </td>
                                        <td class="col-sm-2">
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-default" data-bind="click:$root.modal.search.remove.user.bind()"><span class="glyphicon glyphicon-trash"></span></button>
                                            </div>
                                        </td>
                                    </tr>
                                    <!-- /ko -->
                                    <!-- ko if:$root.searchExternalProviders -->
                                    <tr>
                                        <td class="col-sm-10">
                                            <span data-bind="text:CompanyName"></span>
                                        </td>
                                        <td class="col-sm-2">
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-default" data-bind="click:$root.modal.search.remove.externalTrainingProvider.bind()"><span class="glyphicon glyphicon-trash"></span></button>
                                            </div>
                                        </td>
                                    </tr>
                                    <!-- /ko -->
                                </tbody>
                                <!-- /ko -->
                                <!-- ko ifnot:ko.unwrap($root.users).length > 0 -->
                                <tbody>
                                    <tr class="text-center"><td colspan="3">No <span data-bind="text:$root.modalHeader"></span> Selected</td></tr>
                                </tbody>
                                <!-- /ko -->
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bind="click:$root.modal.search.save.bind()">Save</button>
                <button type="button" class="btn btn-default" data-bind="click:$root.modal.search.cancel.bind()">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal modal-fade" id="create_externalTrainingActivity_modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-header-custom">
                <span>Create External Training Provider</span>
            </div>
            <div class="modal-body" data-bind="with:$root.modal.create.externalTrainingProvider.model.data">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label class="control-label">Company Name</label>
                            <input type="text" class="form-control" name="CompanyName" data-bind="textInput:CompanyName, validatewith:$root.modal.create.externalTrainingProvider.errors" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Address</label>
                            <input type="text" class="form-control" name="Address" data-bind="textInput:Address,validatewith:$root.modal.create.externalTrainingProvider.errors" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Email Address</label>
                            <input type="text" class="form-control" name="EmailAddress" data-bind="textInput:EmailAddress,validatewith:$root.modal.create.externalTrainingProvider.errors" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Mobile Number</label>
                            <input type="text" class="form-control" name="MobileNumber" data-bind="textInput:MobileNumber,validatewith:$root.modal.create.externalTrainingProvider.errors" />
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label class="control-label">Contact Person</label>
                            <input type="text" class="form-control" name="ContactPerson" data-bind="textInput:ContactPerson,validatewith:$root.modal.create.externalTrainingProvider.errors" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Contact Number</label>
                            <input type="text" class="form-control" name="ContactNumber" data-bind="textInput:ContactNumber,validatewith:$root.modal.create.externalTrainingProvider.errors" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">BEE Status Level</label>
                            <input type="text" class="form-control" name="BEEStatusLevel" data-bind="textInput:BEEStatusLevel,validatewith:$root.modal.create.externalTrainingProvider.errors" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" data-bind="click:$root.modal.create.externalTrainingProvider.save.bind()">Save</button>
                <button class="btn btn-default" data-bind="click:$root.modal.create.externalTrainingProvider.cancel.bind()">Cancel</button>
            </div>
        </div>
    </div>
</div>
<script>
@{
    (ViewBag.Links as IDictionary<string, string>).Add("defaultImageUrl", Url.Content("~/Content/images/otherDoc.png"));
    (ViewBag.Links as IDictionary<string, string>).Add("uploadLink", Url.Action("Post", "Upload", new { Area = "" }));
    (ViewBag.Links as IDictionary<string, string>).Add("autocomplete_onrampUsers", Url.Action("Users", "AutoComplete", new { Area = "", AllCompanyUsers = true }));
    (ViewBag.Links as IDictionary<string, string>).Add("autocomplete_externalTrainingProviders", Url.Action("ExternalTrainingProviders", "AutoComplete", new { Area = "" }));
    (ViewBag.Links as IDictionary<string, string>).Add("autocomplete_trainingLabels", Url.Action("TrainingLabels", "AutoComplete", new { Area = "" }));
    (ViewBag.Links as IDictionary<string, string>).Add("create_externaleTrainingProvider", Url.Action("Save", "ExternalTrainingProvider", new { Area = "" }));

}
    var vm = app.data.crudController(@Html.ToJson(Model),@Html.ToJson((IDictionary<string,string>)ViewBag.Links),@Html.ToJson((string)ViewBag.Mode));
    _init();
    if (window.location.href.indexOf('=') < 0 && !ko.unwrap(vm.data.Id)) { window.location.href = vm.links.index; }
    vm.data.RewardPoints.extend({ numeric: 2, preventNegative: true });
    vm.data.CostImplication.extend({ numeric: 2, preventNegative: true });
    ko.applyBindings(vm,document.getElementsByTagName('body')[0]);

    app.data.typeahead.create('#ExternalTrainers','@Url.Content("~/AutoComplete/" + AutoCompleteSection.AllExternalTrainingProviders.Action)','@AutoCompleteSection.AllExternalTrainingProviders.Name', vm.cache.externalTrainingProviders.data);
    app.data.typeahead.create('#OnRampUsers', '@Url.Content("~/AutoComplete/" + AutoCompleteSection.AllUsers.Action)', '@AutoCompleteSection.AllUsers.Name', null);
    app.data.typeahead.create('#InternalTrainers', '@Url.Content("~/AutoComplete/" + AutoCompleteSection.AllUsers.Action)', '@AutoCompleteSection.AllUsers.Name', null);
    app.data.typeahead.create('#BursaryType', '@Url.Content("~/AutoComplete/" + AutoCompleteSection.BursaryType.Action)', '@AutoCompleteSection.BursaryType.Name', null);
    app.data.typeahead.tags.create('#TrainingLabels', '@Url.Content("~/AutoComplete/" + AutoCompleteSection.TrainingLabels.Action)', '@AutoCompleteSection.TrainingLabels.Name', true,null);

    $(function () {
        $('#OnRampUsers').bind('typeahead:select', vm.modal.search.add.user);
        $('#InternalTrainers').bind('typeahead:select', vm.modal.search.add.user);
        $('#ExternalTrainers').bind('typeahead:select', vm.modal.search.add.externalTrainingProvider);
        document.getElementById('OnRampUsers').addEventListener('keypress', stopModalCloseOnEnter);
        document.getElementById('InternalTrainers').addEventListener('keypress', stopModalCloseOnEnter);
        document.getElementById('ExternalTrainers').addEventListener('keypress', function (event) {
            if (event.keyCode == 13) {
                $.get('@Url.Content("~/AutoComplete/" + AutoCompleteSection.AllExternalTrainingProviders.Action)').then(function (response) {
                    var found = false;
                    var substrRegex = new RegExp($('#ExternalTrainers').typeahead('val'), 'i');
                    $.each(response, function () {
                        found = substrRegex.test(this.Value);
                        if (found)
                            return false;
                    })
                    if (!found)
                        vm.modal.create.externalTrainingProvider.open();
                });
                stopModalCloseOnEnter(event);
            }
        });
    });

    function stopModalCloseOnEnter(event) {
        if (event.keyCode == 13) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }
    }
    function _modal_search_cancel() {
        $('#search_modal').modal('hide');
        vm.users.removeAll();
        vm.userSearch(null);
    }
    function _modal_search_trainee_open() {
        vm.modalHeader('Trainees');
        vm.utils.array.sync(vm.data.UsersTrained, vm.users);
        $('#search_modal').modal('show');
    }
    function _modal_search_trainer_open() {
        vm.modalHeader('Trainers');
        vm.trainingActivityType.executeDelegateOn("External", function () { vm.utils.array.sync(vm.data.ExternalTrainingActivityDetail().ConductedBy, vm.users); });
        vm.trainingActivityType.executeDelegateOn("Toolbox Talk", function () { vm.utils.array.sync(vm.data.ToolboxTalkTrainingActivityDetail().ConductedBy, vm.users); });
        vm.trainingActivityType.executeDelegateOn("Internal", function () { vm.utils.array.sync(vm.data.InternalTrainingActivityDetail().ConductedBy, vm.users); });
        vm.trainingActivityType.executeDelegateOn("Mentoring And Coaching", function () { vm.utils.array.sync(vm.data.MentoringAndCoachingTrainingActivityDetail().ConductedBy, vm.users); });
        vm.trainingActivityType.executeDelegateOn("Bursary", function () { vm.utils.array.sync(vm.data.BursaryTrainingActivityDetail().ConductedBy, vm.users); });
        $('#search_modal').modal('show');
    }
    function _modal_search_save(data, event) {
        if (vm.searchTrainees()) {
            vm.utils.array.sync(vm.users, vm.data.UsersTrained);
        } else if (vm.searchTrainers() || vm.searchExternalProviders()) {
            vm.trainingActivityType.executeDelegateOn("External", function () { vm.utils.array.sync(vm.users, vm.data.ExternalTrainingActivityDetail().ConductedBy); });
            vm.trainingActivityType.executeDelegateOn("Toolbox Talk", function () { vm.utils.array.sync(vm.users, vm.data.ToolboxTalkTrainingActivityDetail().ConductedBy); });
            vm.trainingActivityType.executeDelegateOn("Internal", function () { vm.utils.array.sync(vm.users, vm.data.InternalTrainingActivityDetail().ConductedBy); });
            vm.trainingActivityType.executeDelegateOn("Mentoring And Coaching", function () { vm.utils.array.sync(vm.users, vm.data.MentoringAndCoachingTrainingActivityDetail().ConductedBy); });
            vm.trainingActivityType.executeDelegateOn("Bursary", function () { vm.utils.array.sync(vm.users, vm.data.BursaryTrainingActivityDetail().ConductedBy); });
        }
        else {
            notif({
                type: 'error',
                msg: 'Update Users Failed Please Try Again',
                multiline: true
            });
            return false;
        }
        notif({
            type: 'success',
            msg: 'Updated Users'
        });
        vm.users.removeAll();
        vm.modal.search.cancel();
    }
    function _modal_search_add_user(ev, suggestion) {
        if (suggestion) {
            if (!vm.utils.array.find(vm.users, function (u) { return ko.unwrap(u.Id) == ko.unwrap(suggestion.Id); }))
                vm.users.push({ Name: suggestion.Value, Email: suggestion.Extra, Id: suggestion.Id });
        }
        $('#' + ev.currentTarget.id).typeahead('val', '');
    }
    function _modal_search_add_externalTrainingProvider(ev,suggestion) {
        if (suggestion) {
            if (!vm.utils.array.find(vm.users, function (x) { return ko.unwrap(x.Id) == ko.unwrap(suggestion.Id); }))
                vm.users.push({ CompanyName: suggestion.Value, Id: suggestion.Id });
        }
        $('#' + ev.currentTarget.id).typeahead('val', '');
    }
    function _modal_search_remove_user(u) {
        vm.utils.array.remove(u, vm.users, function (user) { return ko.unwrap(user.Id) == ko.unwrap(u.Id); });
    }
    function _modal_search_remove_externalTrainingProvider(provider) {
        vm.utils.array.remove(provider, vm.users, function (x) { return ko.unwrap(x.Id) === ko.unwrap(provider.Id); });
    }

    function _modal_create_externalTrainingProvider_save() {
        $.ajax({
            method: 'POST',
            data: ko.mapping.toJS(vm.modal.create.externalTrainingProvider.model.data),
            url: vm.links.create_externaleTrainingProvider,
            statusCode: {
                400: function (xhr, code, error) {
                    vm.modal.create.externalTrainingProvider.errors(JSON.parse(error));
                    notif({
                        msg: 'Please fix the error/s and try again',
                        multiline: true,
                        type: 'error'
                    });
                },
                202: function () {
                    notif({
                        msg: 'Saved Successfully',
                        type: 'success'
                    });
                    vm.modal.create.externalTrainingProvider.cancel();
                    vm.cache.externalTrainingProviders.refresh();
                },
                500: function () {
                    notif({
                        msg: 'Something went wrong',
                        type: 'error'
                    });
                }
            }
        });
    }
    function _modal_create_externalTrainingProvider_open() {
        vm.cache.externalTrainingProviders.refresh();
        vm.modal.search.save();
        vm.modal.create.externalTrainingProvider.model.new();
        $('#create_externalTrainingActivity_modal').modal('show');
    }
    function _modal_create_externalTrainingProvider_cancel() {
        vm.modal.create.externalTrainingProvider.model.new();
        vm.modal.create.externalTrainingProvider.errors([]);
        $('#create_externalTrainingActivity_modal').modal('hide');
    }
    function _modal_create_externalTrainingProvider_model_new() {
        vm.modal.create.externalTrainingProvider.model.data(vm.utils.observable.clone(vm.template.externalTrainingProvider));
    }
    function _modal() {
        return {
            search: {
                trainer: {
                    open: _modal_search_trainer_open
                },
                trainee: {
                    open: _modal_search_trainee_open
                },
                add: {
                    user: _modal_search_add_user,
                    externalTrainingProvider: _modal_search_add_externalTrainingProvider
                },
                remove: {
                    user: _modal_search_remove_user,
                    externalTrainingProvider: _modal_search_remove_externalTrainingProvider
                },
                cancel: _modal_search_cancel,
                save: _modal_search_save
            },
            create: {
                mode : ko.observable(),
                externalTrainingProvider: {
                    save: _modal_create_externalTrainingProvider_save,
                    model: {
                        new: _modal_create_externalTrainingProvider_model_new,
                        data : ko.observable()
                    },
                    open: _modal_create_externalTrainingProvider_open,
                    cancel: _modal_create_externalTrainingProvider_cancel,
                    errors: ko.observableArray()
                }
            }
        };
    }

    function _utils_array_find(list, comparer) {
        var model = null;
        $.each(ko.isObservable(list) ? ko.unwrap(list) : list, function () {
            if (comparer(ko.unwrap(this)))
                model = this;
        });
        return model;
    }
    function _utils_array_remove(entry, list, comparer) {
        var model = null;
        entry = ko.isObservable(entry) ? ko.unwrap(entry) : entry;
        $.each(ko.isObservable(list) ? ko.unwrap(list) : list, function () {
            if (comparer(ko.unwrap(this)))
                model = this;
        });
        if (!model)
            return;
        ko.isObservable(list) ? list.remove(model) : list.splice(list.indexOf(model),1);
    }
    function _utils_array_sync(entries, observableArray) {
        observableArray.removeAll();
        $.each(ko.unwrap(entries), function () {
            var observable = !ko.isObservable(this) ? ko.observable(this) : this;
            observableArray.push(observable);
        });
    }
    function _utils_array_copy(entries, array) {
        array.splice(0, array.length);
        $.each(entries, function () {
            array.push(this);
        });
    }
    function _utils_array_async_fromUrl(actionUrl) {
        return $.ajax({
            method: 'get',
            url: actionUrl
        });
    }
    function _utils_validate_email(email) {
        var re = /^(([^<>()\[\]\\.,;:\s@@"]+(\.[^<>()\[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
    }
    function _utils_observable_clone(observable) {
        return ko.mapping.fromJS(ko.mapping.toJS(observable));
    }
    function _utils() {
        return {
            array: {
                find: _utils_array_find,
                remove: _utils_array_remove,
                sync: _utils_array_sync,
                copy : _utils_array_copy,
                async: {
                    fromUrl : _utils_array_async_fromUrl
                }
            },
            validate: {
                email: _utils_validate_email
            },
            observable: {
                clone : _utils_observable_clone
            }
        };
    }

    function _trainingActivityType_current() {
        if (ko.unwrap(vm.data.TrainingActivityType == null || ko.unwrap(vm.data.TrainingActivityType) == undefined)) {
            var t = window.location.href.substring(window.location.href.indexOf('TrainingActivityType'));
            t = t.substring(t.indexOf('=') + 1);
            return t;
        }
        else
            return ko.unwrap(vm.data.TrainingActivityType).toString();
    }
    function _trainingActivityType_from_description(desc) {
        var match = vm.utils.array.find(vm.trainingActivityType.list(), function (x) { return x.Text === desc || x.Value === desc; });
        return match ? match.Value.toString() : null;
    }
    function _trainingActivityType_executeDelegateOn(targetType, delegate) {
        if (vm.trainingActivityType.current() === vm.trainingActivityType.from.description(targetType))
            delegate();
    }
    function _trainingActivityType() {
        return {
            current: _trainingActivityType_current,
            from: {
                description: _trainingActivityType_from_description,
            },
            executeDelegateOn: _trainingActivityType_executeDelegateOn,
            list: _trainingActivityType_list
        }
    }

    function _upload_options() {
        return {
            showProgress: false,
            url: "@Url.Action("POST", "Upload", new { Area = "" })",
            before: _upload_eventHandlers_onBeforeUpload,
            success: _upload_eventHandlers_onUploadSuccess,
            error: _upload_eventHandlers_onUploadError,
            onProgress: _upload_eventHandlers_onUploadProgress,
            autoupload: false
        };
    }
    function _upload_eventHandlers_onBeforeUpload(element, fileName, valueProperty) {
        var result = false;
        var ext = fileName.substring(fileName.lastIndexOf('.') + 1).toUpperCase();
        var acceptedImageFileTypes = [
            "PNG",
            "JPEG",
            "JPG",
            "GIF",
            "BMP"
        ];
        var acceptedDocumentfileTypes = [
            "PPSX",
            "PPS",
            "DOC",
            "DOCX",
            "XLS",
            "XLSX",
            "PPT",
            "PPTX",
            "PDF"
        ];
        var accepted = false;
        if (ko.unwrap(vm.documentsTab)) {
           
            accepted = vm.utils.array.find(acceptedDocumentfileTypes, function(extension) { return extension.toString() === ext; });
        } else {
            accepted = vm.utils.array.find(acceptedDocumentfileTypes, function(extension) { return extension.toString() === ext; });
            if (!accepted)
                accepted = vm.utils.array.find(acceptedImageFileTypes, function(extension) { return extension.toString() === ext; });
        }
        if (accepted) {
            ko.unwrap(valueProperty).Type(vm.upload.type.from.description(ko.unwrap(vm.documentsTab) ? 'Training Activity Document' : 'Training Activity Invoice'));
            ko.unwrap(valueProperty).InProcess(true);
            ko.unwrap(valueProperty).Progress(0 + '%');
            if (vm.documentsTab()) {
                vm.data.Documents.push(valueProperty);
            } else {
                vm.trainingActivityType.executeDelegateOn('External', function () { vm.data.ExternalTrainingActivityDetail().Invoices.push(valueProperty); });
                vm.trainingActivityType.executeDelegateOn('Bursary', function () { vm.data.BursaryTrainingActivityDetail().Invoices.push(valueProperty); });
            }
            result = true;
        } else {
            notif({ type: 'error', msg: 'Please select a Document To Upload' });
        }
        return result;
    }
    function _upload_eventHandlers_onUploadSuccess(data, textStatus, xhr, valueProperty) {
        var filename = valueProperty().Description();
        var ext = filename.substring(filename.lastIndexOf('.'));
        valueProperty().Description(filename.replace(ext, ''));
    }
    function _upload_eventHandlers_onUploadError(valueProperty) {

    }
    function _upload_open(data) {
        var newElement = $('<input data-bind="fileUpload:new ko.observable(),fileuploadOptions:vm.upload.options,valueProperty:new vm.upload.model()" class="upload hidden" type="file" name="files[]" accept="pdf" />');
        $(newElement).appendTo('#inputs');
        ko.applyBindingsToNode(newElement[0], null, data);
        $(newElement).click();
    }
    function _upload_type_from_description(desc) {
        var match = vm.utils.array.find(vm.upload.type.list(), function (x) { return x.Text === desc || x.Value === desc; });
        return match ? match.Value.toString() : null;
    }
    function _upload_eventHandlers_onUploadProgress(event, position, total, percentage, fileName, valueProperty, submitEvent, valueAccessor, container) {
        valueProperty().Progress(percentage + "%");
        valueProperty().Size(total);
    }
    function _upload_delete_document(doc) {
        vm.upload.delete.fromUrl(doc)
            .then(function (data) { if (data) { vm.utils.array.remove(doc, vm.data.Documents, function (x) { return ko.unwrap(x.Id) == ko.unwrap(doc.Id); }); } else { notif({ type: 'error', msg: 'Delete Failed' }); } }, function (msg) { notif({ type: 'error', msg: 'Delete Failed' }); });
    }
    function _upload_delete_invoice(inv) {
        vm.upload.delete.fromUrl(inv).then(function (data) {
            if (data) {
                vm.trainingActivityType.executeDelegateOn('External', function () {
                    vm.utils.array.remove(inv, vm.data.ExternalTrainingActivityDetail().Invoices, function (x) { return ko.unwrap(x.Id) == ko.unwrap(inv.Id); });
                });
                vm.trainingActivityType.executeDelegateOn('Bursary', function () {
                    vm.utils.array.remove(inv, vm.data.BursaryTrainingActivityDetail().Invoices, function (x) { return ko.unwrap(x.Id) == ko.unwrap(inv.Id); });
                });
            }
            else {
                notif({ type: 'error', msg: 'Delete Failed' });
            }
        }, function (msg) { notif({ type: 'error', msg: 'Delete Failed' }); });
    }
    function _upload_delete_fromUrl(upload){
        return $.ajax({
            method: 'delete',
            url: ko.unwrap(upload.DeleteUrl)
        });
    }
    function _upload_model(type) {
        var temp = vm.template.upload;
        temp.Type(type);
        return new ko.observable(temp);
    }
    function _upload() {
        return {
            options: _upload_options(),
            eventHandlers: {
                onBeforeUpload: _upload_eventHandlers_onBeforeUpload,
                onUploadSuccess: _upload_eventHandlers_onUploadSuccess,
                onUploadError: _upload_eventHandlers_onUploadError
            },
            open: _upload_open,
            type: {
                list: _upload_type_list,
                from: {
                    description: _upload_type_from_description
                }
            },
            delete: {
                document: _upload_delete_document,
                invoice: _upload_delete_invoice,
                fromUrl : _upload_delete_fromUrl
            },
            model : _upload_model
        };
    }

    function _cache_externalTrainingProviders_refresh() {
        vm.cache.externalTrainingProviders.data(!vm.cache.externalTrainingProviders.data());
    }
    function _cache() {
        return {
            externalTrainingProviders: {
                data : ko.observable(false),
                refresh: _cache_externalTrainingProviders_refresh
            }
        };
    }

    function _trainingLabels_add(ev, suggestion) {
      
    }
    function _trainingLabels() {
        return {
            add : _trainingLabels_add
        }
    }
    function _trainingActivityType_list() {
        return [
            { Value: @Html.ToJson((int)TrainingActivityType.Bursary), Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<TrainingActivityType>(TrainingActivityType.Bursary)) },
            { Value: @Html.ToJson((int)TrainingActivityType.External), Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<TrainingActivityType>(TrainingActivityType.External)) },
            { Value: @Html.ToJson((int)TrainingActivityType.Internal), Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<TrainingActivityType>(TrainingActivityType.Internal)) },
            { Value: @Html.ToJson((int)TrainingActivityType.MentoringAndCoaching), Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<TrainingActivityType>(TrainingActivityType.MentoringAndCoaching)) },
            { Value: @Html.ToJson((int)TrainingActivityType.ToolboxTalk), Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<TrainingActivityType>(TrainingActivityType.ToolboxTalk)) }
        ];
    }
    function _upload_type_list() {
        return [
            { Value: @Html.ToJson((int)FileUploadType.TrainingActivityDocument),Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<FileUploadType>(FileUploadType.TrainingActivityDocument)) },
            { Value: @Html.ToJson((int)FileUploadType.TrainingActivityInvoice),Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<FileUploadType>(FileUploadType.TrainingActivityInvoice)) }
        ];
    }
    function _init() {
        vm.trainingActivityType = _trainingActivityType();
        vm.modal = _modal();
        vm.utils = _utils();
        vm.upload = _upload();
        vm.cache = _cache();
        vm.trainingLabels = _trainingLabels();
        //observables
        vm.TrainingActivityTypes = ko.observableArray(vm.trainingActivityType.list());
        vm.documentsTab = ko.observable(true);
        vm.modalHeader = ko.observable();
        vm.users = ko.observableArray();
        vm.userSearch = ko.observable();
        vm.uploadModel = ko.observable();

        //set up viewmodel
        if (!ko.unwrap(vm.data.Id)) {
            vm.trainingActivityType.executeDelegateOn('Bursary', function () { vm.data.BursaryTrainingActivityDetail = ko.observable(ko.mapping.fromJS(@Html.ToJson(new BursaryTrainingActivityDetailModel()))); });
            vm.trainingActivityType.executeDelegateOn('External', function () { vm.data.ExternalTrainingActivityDetail = ko.observable(ko.mapping.fromJS(@Html.ToJson(new ExternalTrainingActivityDetailModel()))); });
            vm.trainingActivityType.executeDelegateOn('Internal', function () { vm.data.InternalTrainingActivityDetail = ko.observable(ko.mapping.fromJS(@Html.ToJson(new InternalTrainingActivityDetailModel()))); });
            vm.trainingActivityType.executeDelegateOn('Mentoring And Coaching', function () { vm.data.MentoringAndCoachingTrainingActivityDetail = ko.observable(ko.mapping.fromJS(@Html.ToJson(new MentoringAndCoachingTrainingActivityDetailModel()))); });
            vm.trainingActivityType.executeDelegateOn('Toolbox Talk', function () { vm.data.ToolboxTalkTrainingActivityDetail = ko.observable(ko.mapping.fromJS(@Html.ToJson(new ToolboxTalkTrainingActivityDetailModel()))); });
            vm.data.TrainingActivityType(vm.trainingActivityType.current());
        }
        else {
            vm.trainingActivityType.executeDelegateOn('Bursary', function () { vm.data.BursaryTrainingActivityDetail = ko.observable(vm.data.BursaryTrainingActivityDetail); });
            vm.trainingActivityType.executeDelegateOn('External', function () { vm.data.ExternalTrainingActivityDetail = ko.observable(vm.data.ExternalTrainingActivityDetail); });
            vm.trainingActivityType.executeDelegateOn('Internal', function () { vm.data.InternalTrainingActivityDetail = ko.observable(vm.data.InternalTrainingActivityDetail); });
            vm.trainingActivityType.executeDelegateOn('Mentoring And Coaching', function () { vm.data.MentoringAndCoachingTrainingActivityDetail = ko.observable(vm.data.MentoringAndCoachingTrainingActivityDetail); });
            vm.trainingActivityType.executeDelegateOn('Toolbox Talk', function () { vm.data.ToolboxTalkTrainingActivityDetail = ko.observable(vm.data.ToolboxTalkTrainingActivityDetail); });

        }
        vm.template = {
            upload: ko.mapping.fromJS(@Html.ToJson(new FileUploadResultViewModel())),
            externalTrainingProvider: ko.mapping.fromJS(@Html.ToJson(new ExternalTrainingProviderModel())),
            trainingLabel: ko.mapping.fromJS(@Html.ToJson(new TrainingLabelModel()))
        };

        //computed observables
        vm.showInvoices = ko.computed(function () { return ko.unwrap(vm.data.ExternalTrainingActivityDetail) || ko.unwrap(vm.data.BursaryTrainingActivityDetail); });
        vm.getHeight = ko.computed(function () { return ko.unwrap(vm.data.BursaryTrainingActivityDetail) ? '431px' : '345px'; });
        vm.searchTrainees = ko.computed(function () {
            return ko.unwrap(vm.modalHeader) ? ko.unwrap(vm.modalHeader).indexOf('Trainees') > -1 : false;
        });
        vm.searchTrainers = ko.computed(function () {
            return ko.unwrap(vm.modalHeader) ? ko.unwrap(vm.modalHeader).indexOf('Trainers') > -1 ? ko.unwrap(vm.data.ExternalTrainingActivityDetail) ? false : true : false : false;
        });
        vm.searchExternalProviders = ko.computed(function () {
            return ko.unwrap(vm.modalHeader) ? ko.unwrap(vm.modalHeader).indexOf('Trainers') > -1 ? ko.unwrap(vm.data.ExternalTrainingActivityDetail) ? true : false : false : false;
        });
    };
</script>
