@using Ramp.Contracts.ViewModel
@using Common.Web
@using Domain.Enums
@using Domain.Customer.Models
@model Ramp.Contracts.ViewModel.TrainingActivityModel


<script src="~/Scripts/bootstrap-datetimepicker.min.js"></script>
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
@*<script src="~/Scripts/bootstrap3-typeahead.min.js"></script>*@
<link href="~/Scripts/themes/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/Scripts/themes/bootstrap-multiselect.js"></script>
<style>
    .requiredTxt {
        border: solid red;
    }

    input, select {
        max-width: 100%;
    }

    .required {
        color: red;
    }

    .errorClass {
        border: 2px solid #a94442;
    }

    .cursor {
        cursor: pointer;
    }

    .switches {
        vertical-align: middle;
        position: relative;
        display: inline-block;
        width: 2.4em;
        height: 1.4em;
    }

        .switches input {
            display: none;
        }

    .sliders {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        -ms-transition: .4s;
        -o-transition: .4s;
        transition: .4s
    }

        .sliders:before {
            position: absolute;
            content: "";
            height: 1em;
            width: 1em;
            left: 0.2em;
            bottom: 0.2em;
            background-color: white;
            -webkit-transition: .4s;
            -ms-transition: .4s;
            -o-transition: .4s;
            transition: .4s;
        }

    input:checked + .sliders {
        background-color: #27b899;
    }



        input:checked + .sliders:before {
            -ms-transform: translateX(1em);
            -webkit-transform: translateX(1em);
            transform: translateX(1em);
        }

    .sliders.round {
        border-radius: 0.7em;
    }

        .sliders.round:before {
            border-radius: 50%;
        }
</style>
<div class="row">
    <div class="col-md-12">
        <div class="panel-info">


            <div class="panel-body">
                @using (Ajax.BeginForm("CreateOrUpdateTrainingActivity", "TrainingActivityLog", new AjaxOptions { OnComplete = "fnclose();", HttpMethod = "POST" }, new { @id = "frmTrainingActivity" })) {

                    @Html.HiddenFor(m => m.Id)

                    <div class="col-md-12">
                        <h4> </h4>
                    </div>



                    <div class="col-md-6">

                        @* don't remove below line of code this is used for disable the autofill textboxes *@
                        <div style="display:none; overflow: none; height: 0px;background: transparent;" data-description="dummyPanel for Chrome auto-fill issue">
                            <input type="text" style="height:0;background: transparent; color: transparent;border: none;" data-description="dummyUsername"></input>
                            <input type="password" style="height:0;background: transparent; color: transparent;border: none;" data-description="dummyPassword"></input>
                        </div>


                        <div class="form-group">
                            <span class="required">*</span> <span>Title: </span>
                            @Html.TextBoxFor(m => m.Title, new { @class = "form-control requiredClass", @id = "txtTitle", @autocomplete = "none", style = "min-width: 100%" })
                        </div>



                        <div class="form-group">
                            <span>Description: </span>

                            @Html.TextAreaFor(m => m.Description, new { @class = "form-control  max-width-none", @id = "txtDescription", @autocomplete = "off", style = "min-width: 100%" })
                        </div>

                        <div class="form-group">
                            <span class="required">*</span> <span>From: </span>
                            <div class="input-group date" id="datetimepicker6">
                                @*<input type="date" id="From" name="From" value="@Model.From" class="form-control requiredClass" />*@
                                @Html.TextBoxFor(m => m.From, new {@class = "form-control datepicker" , @id = "datepicker" })

                                @*@Html.TextBoxFor(m => m.From, new { @class = "form-control requiredClass", @id = "txtStartDate", @autocomplete = "off" })*@
                                <span class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </span>

                            </div>
                        </div>

                        <div class="form-group">
                            <span class="required">*</span> <span>To: </span>
                            <div class="input-group date" id='datetimepicker7'>
                                @Html.TextBoxFor(m => m.To, new { @class = "form-control requiredClass", @id = "txtEndDate", @autocomplete = "off" })
                                <span class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </span>
                            </div>
                        </div>

                        <div class="form-group">
                            <span>Venue: </span>
                            @Html.TextBoxFor(m => m.Venue, new { @class = "form-control ", @id = "txtVenue", @autocomplete = "none", style = "min-width: 100%" })
                        </div>

                        <div class="form-group">
                            <span class="required">*</span> <span>Cost Implication: </span>
                            @Html.TextBoxFor(m => m.CostImplication, new { @class = "form-control ", @onkeypress = "return onlyNumberWithDot(event);", @id = "txtCostImplication", @autocomplete = "none", style = "min-width: 100%" })
                        </div>

                    </div>


                    <div class="col-lg-6">
                        <div class="form-group">
                            <span>Points: </span>
                            @Html.TextBoxFor(m => m.RewardPoints, new { @class = "form-control ", @onkeypress = "return onlyNumbers(event);", @id = "txtRewardPoints", @autocomplete = "none", style = "min-width: 100%" })
                        </div>
                        <div class="form-group">
                            <span>Additional Info: </span>

                            @Html.TextAreaFor(m => m.AdditionalInfo, new { @class = "form-control  max-width-none", @id = "txtAdditionalInfo", @autocomplete = "off", style = "min-width: 100%" })
                        </div>

                        <div class="form-group">
                            <span>Type: </span>

                            @Html.DropDownListFor(m => m.TrainingActivityType, Model.TrainingActivityTypeList, new { @class = "form-control" })
                        </div>

                        <div class="form-group">
                            <span>Training Labels</span>
                            <div class="input-group">
                                @Html.DropDownList("ddlTrainingLabel", Model.TrainingLabelList, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group" id="divInternalTrainingProvider">
                            <span>Trainers: </span>
                            <div class="input-group">
                                @Html.DropDownList("ddlTrainers", Model.TrainersList, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group" id="divExternalTrainingProvider" style="display:none;">
                            <span>Trainers</span>
                            <div class="input-group">
                                @Html.DropDownList("ddlExternalTrainingProvider", Model.ExternalTrainingProviderList, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            <span>Trainees </span>
                            <div class="input-group">
                                @Html.DropDownList("ddlTrainees", Model.TraineesList, new { @class = "form-control" })
                            </div>
                        </div>
                    </div>


                    @Html.HiddenFor(c => c.TrainingLabels)
                    @Html.HiddenFor(c => c.Trainees)
                    @Html.HiddenFor(c => c.Trainers)
                    @Html.HiddenFor(c => c.ExternalTrainingProviders)
                    @Html.HiddenFor(c => c.UploadIds)
                    @Html.HiddenFor(c => c.ExternalInvoiceIds)
                    @Html.HiddenFor(c => c.BursaryInvoiceIds)
                    <div class="col-lg-12">
                        <a data-bind="click:$root.upload.open.bind()" class="label btn-primary">Add</a>
                        <div class="hidden" id="inputs"></div>
                        <ul class="nav nav-tabs">
                            <li role="button" class="active DocCss" id="liDocument"><a>Documents</a></li>
                            <li role="button" id="liInvoice" class="DocCss"><a>Invoices</a></li>
                        </ul>
                        <div class="panel panel-info">
                            <div class="panel-body">
                                <div class="table-responsive" data-bind="style:{'max-height': $root.getHeight}">
                                    <table class="table-striped" style="width:100%">
                                        <!-- ko if:ko.unwrap($root.documentsTab) -->
                                        <!-- ko ifnot:ko.unwrap($root.data.Documents).length > 0 -->
                                        <tbody class="DocumentCss">
                                            <tr class="text-center"><td colspan="3">No Documents Uploaded</td></tr>
                                        </tbody>
                                        <!-- /ko -->
                                        <!-- ko if:ko.unwrap($root.data.Documents).length > 0-->
                                        <tbody class="DocumentCss" data-bind="foreach:$root.data.Documents">
                                            <!-- ko if:ko.unwrap(InProcess) -->
                                            <tr class="row">
                                                <td colspan="3" class="col-sm-12">
                                                    <div class="progress">
                                                        <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                                                            <div class="progress-bar progress-bar-success" data-bind="style:{width:Progress}"></div>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                            <!-- /ko -->
                                            <!-- ko ifnot:ko.unwrap(InProcess) -->
                                            <tr class="row">
                                                <td class="col-sm-2">
                                                    <img class="img-responsive center-block" data-bind="attr:{src: ThumbnailUrl}" style="max-height:50px" />
                                                </td>
                                                <td class="col-sm-7"><input type="text" class="form-control" data-bind="textInput:Description"></td>
                                                <td class="col-sm-3">
                                                    <div class="row btn-group btn-group-sm">
                                                        <a class="btn btn-default" data-bind="attr:{href:Url}" target="_blank"><span class="glyphicon glyphicon-download"></span></a>
                                                        <button class="btn btn-default" data-bind="click:$root.upload.delete.document"><span class="glyphicon glyphicon-trash" style="color:red"></span></button>
                                                    </div>
                                                </td>
                                            </tr>
                                            <!-- /ko -->
                                        </tbody>
                                        <!-- /ko -->
                                        <!-- /ko -->
                                        <!-- ko ifnot: ko.unwrap($root.documentsTab) -->
                                        <!-- ko with:$root.data.ExternalTrainingActivityDetail -->
                                        <!-- ko ifnot:ko.unwrap(Invoices).length > 0 -->
                                        <tbody class="ExternalInvoiceCss">
                                            <tr class="text-center"><td colspan="3">No Invoices Uploaded</td></tr>
                                        </tbody>
                                        <!-- /ko -->
                                        <!-- ko if:ko.unwrap(Invoices).length > 0-->
                                        <tbody class="ExternalInvoiceCss" data-bind="foreach: Invoices">
                                            <!-- ko if:ko.unwrap(InProcess) -->
                                            <tr class="row">
                                                <td colspan="3" class="col-sm-12">
                                                    <div class="progress">
                                                        <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                                                            <div class="progress-bar progress-bar-success" data-bind="style:{width:Progress}"></div>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                            <!-- /ko -->
                                            <!-- ko ifnot:ko.unwrap(InProcess) -->
                                            <tr class="row">
                                                <td class="col-sm-2">
                                                    <img class="img-responsive center-block" data-bind="attr:{src: ThumbnailUrl}" style="max-height:50px" />
                                                </td>
                                                <td class="col-sm-7"><input class="form-control" type="text" data-bind="textInput:Description"></td>
                                                <td class="col-sm-3">
                                                    <div class="row btn-group btn-group-sm">
                                                        <a class="btn btn-default" data-bind="attr:{href:Url}" target="_blank"><span class="glyphicon glyphicon-download"></span></a>
                                                        <button class="btn btn-default" data-bind="click:$root.upload.delete.invoice"><span class="glyphicon glyphicon-trash" style="color:red"></span></button>
                                                    </div>
                                                </td>
                                            </tr>
                                            <!-- /ko -->
                                        </tbody>
                                        <!-- /ko -->
                                        <!-- /ko -->
                                        <!-- ko with:$root.data.BursaryTrainingActivityDetail -->
                                        <!-- ko ifnot:ko.unwrap(Invoices).length > 0 -->
                                        <tbody class="BursaryInvoiceCss">
                                            <tr class="text-center"><td colspan="3">No Invoices Uploaded</td></tr>
                                        </tbody>
                                        <!-- /ko -->
                                        <!-- ko if:ko.unwrap(Invoices).length > 0-->
                                        <tbody class="BursaryInvoiceCss" data-bind="foreach: Invoices">
                                            <!-- ko if:ko.unwrap(InProcess) -->
                                            <tr class="row">
                                                <td colspan="3" class="col-sm-12">
                                                    <div class="progress">
                                                        <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                                                            <div class="progress-bar progress-bar-success" data-bind="style:{width:Progress}"></div>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                            <!-- /ko -->
                                            <!-- ko ifnot:ko.unwrap(InProcess) -->
                                            <tr class="row">
                                                <td class="col-sm-2">
                                                    <img class="img-responsive center-block" data-bind="attr:{src: ThumbnailUrl}" style="max-height:50px" />
                                                </td>
                                                <td class="col-sm-7"><input type="text" class="form-control" data-bind="textInput:Description" /></td>
                                                <td class="btn-group btn-group-sm">
                                                    <a class="btn btn-default" data-bind="attr:{href:Url}" target="_blank"><span class="glyphicon glyphicon-download"></span></a>
                                                    <button class="btn btn-default" data-bind="click:$root.upload.delete.invoice"><span class="glyphicon glyphicon-trash" style="color:red"></span></button>
                                                </td>
                                            </tr>
                                            <!-- /ko -->
                                        </tbody>
                                        <!-- /ko-->
                                        <!-- /ko-->
                                        <!-- /ko -->

                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="modal-footer">
                        <div class="text-right">
                            <div class="btn-group">
                                <button type="button" id="btnCancel" data-dismiss="modal" class="btn btn-default closeCss" value="Cancel">Close</button>
                                <input type="submit" onclick="return checkValidation();" id="btnSubmit" value="Confirm" class="btn btn-primary" />


                            </div>
                        </div>
                    </div>

                }
            </div>
        </div>
    </div>
   
</div>


<script>
    $('.DocCss').click(function () {

        $('.DocCss').each(function () {
            $(this).removeClass('active');
        });

        var id = $(this).attr('id');
        if (id === 'liDocument') {
            vm.documentsTab(true);
        } else {
            vm.documentsTab(false);
        }
        $(this).addClass('active');
        $('.BursaryInvoiceCss').each(function () {
            $(this).show();
        });
        $('.ExternalInvoiceCss').each(function () {
            $(this).hide();
        });

    });

    $('#divExternalTrainingProvider').hide();

    $('#ddlTrainingLabel').attr("multiple", "multiple").val('');
    $('#ddlTrainingLabel').multiselect({
        includeSelectAllOption: true,
        nonSelectedText: 'None selected',
        buttonWidth: 250,
        enableFiltering: true,
        maxHeight: 350,
        enableCaseInsensitiveFiltering: true
    });

    var trainingLabels = '@Model.LabelIds';
    if (trainingLabels !== '' && trainingLabels !== undefined && trainingLabels !== null) {
        var nameArr = trainingLabels.split(',');
        $('#ddlTrainingLabel').val(nameArr);
        for (var i in nameArr) {
            var optionVal = nameArr[i];
            $("#ddlTrainingLabel").find("option[value='" + optionVal + "']").prop("selected", "selected");

        }
        $("#ddlTrainingLabel").multiselect('refresh');
    }


    $('#ddlExternalTrainingProvider').attr("multiple", "multiple").val('');
    $('#ddlExternalTrainingProvider').multiselect({
        includeSelectAllOption: true,
        nonSelectedText: 'None selected',
        buttonWidth: 250,
        enableFiltering: true,
        maxHeight: 350,
        enableCaseInsensitiveFiltering: true
    });
    $('#ddlTrainees').attr("multiple", "multiple").val('');
    $('#ddlTrainees').multiselect({
        includeSelectAllOption: true,
        nonSelectedText: 'None selected',
        buttonWidth: 250,
        enableFiltering: true,
        maxHeight: 350,
        enableCaseInsensitiveFiltering: true
    });
    $('#ddlTrainers').attr("multiple", "multiple").val('');
    $('#ddlTrainers').multiselect({
        includeSelectAllOption: true,
        nonSelectedText: 'None selected',
        buttonWidth: 250,
        enableFiltering: true,
        maxHeight: 350,
        enableCaseInsensitiveFiltering: true
    });


    var trainees = '@Model.Trainees'
    if (trainees !== '' && trainees !== undefined && trainees !== null) {
        var traineeArr = trainees.split(',');
        $('#ddlTrainees').val(traineeArr);
        for (var i in traineeArr) {
            var optionVal = trainees[i];
            $("#ddlTrainees").find("option[value='" + optionVal + "']").prop("selected", "selected");

    }
        $("#ddlTrainees").multiselect('refresh');
    }

    $("#datetimepicker6").datepicker();
    $('#datetimepicker7').datepicker();    

    //$('#txtEndDate').datetime({
    //    format: "yyyy-mm-dd",
    //    autoclose: true,
    //    todayBtn: true,
    //    pickerPosition: "top-right"
    //});
    //$('#txtStartDate').datetime({
    //    format: "yyyy-mm-dd",
    //    autoclose: true,
    //    todayBtn: true,
    //    pickerPosition: "top-right"
    //});
    var activityType='@Model.TrainingActivityType.ToString()'
    if (activityType === 'External' && activityType !== null && activityType !== undefined && activityType!=='') {
        $('#divExternalTrainingProvider').show();
        $('#divInternalTrainingProvider').hide();
        var trainers = '@Model.Trainers'
    if (trainers !== '' && trainers !== undefined && trainers !== null) {
        var trainersArr = trainers.split(',');
        $('#ddlExternalTrainingProvider').val(trainersArr);
        for (var i in trainersArr) {
            var optionVal = trainers[i];
            $("#ddlExternalTrainingProvider").find("option[value='" + optionVal + "']").prop("selected", "selected");

    }
        $("#ddlExternalTrainingProvider").multiselect('refresh');
    }
    } else {
        $('#divExternalTrainingProvider').hide();
        $('#divInternalTrainingProvider').show();
        var trainers = '@Model.Trainers'
    if (trainers !== '' && trainers !== undefined && trainers !== null) {
        var trainersArr = trainers.split(',');
        $('#ddlTrainers').val(trainersArr);
        for (var i in trainersArr) {
            var optionVal = trainers[i];
            $("#ddlTrainers").find("option[value='" + optionVal + "']").prop("selected", "selected");

    }
        $("#ddlTrainers").multiselect('refresh');
    }
    }

    $('#TrainingActivityType').change(function () {
        var type = $("#TrainingActivityType option:selected").text();
        if (type === 'External') {
            $('#divExternalTrainingProvider').show();
            $('#divInternalTrainingProvider').hide();
        } else {
            $('#divExternalTrainingProvider').hide();
            $('#divInternalTrainingProvider').show();
        }
        if (type == "External" ) {
            $('#liInvoice').show();
            $('.ExternalInvoiceCss').each(function () {
                $(this).show();
            });
            $('.BursaryInvoiceCss').each(function () {
                $(this).hide();
            });
            $('.DocumentCss').each(function () {
                $(this).hide();
            });
        } else if (type == "Bursary") {
            $('#liInvoice').show();
            $('.BursaryInvoiceCss').each(function () {
                $(this).show();
            });
            $('.ExternalInvoiceCss').each(function () {
                $(this).hide();
            });
            $('.DocumentCss').each(function () {
                $(this).hide();
            });
        } else {
            $('.ExternalInvoiceCss').each(function () {
                $(this).hide();
            });
            $('.BursaryInvoiceCss').each(function () {
                $(this).hide();
            });
            $('#liInvoice').hide();
            $('#liDocument').addClass('active')
            $('.DocumentCss').each(function () {
                $(this).show();
            });
        }
    });


    function fnclose() {
        
        $('#AddTrainingActivityModal').modal('hide');
       // notif({ msg: "<b>Success :</b> Training Activity has been successfully Updated", type: "success", multiline: true });
        setTimeout(function () { window.location.reload(); }, 1000);
    }

    function checkValidation() {
       
        var check = true;
        var labels = $("#ddlTrainingLabel option:selected").toArray().map(item => item.text).join();
        //var labels = $("#ddlTrainingLabel option:selected").text();
        if (labels !== undefined && labels !== null && labels !== "") {
            $('#TrainingLabels').val(labels.toString());
        } else {
            $('#TrainingLabels').val("");
        }
        var trainers = $('#ddlTrainers').val();
        if (trainers !== undefined && trainers !== null && trainers !== "") {
            $('#Trainers').val(trainers.toString());
        } else {
            $('#Trainers').val("");
        }
        var externalTrainingProviders = $('#ddlExternalTrainingProvider').val();
        if (externalTrainingProviders !== undefined && externalTrainingProviders !== null && externalTrainingProviders !== "") {
            $('#ExternalTrainingProviders').val(externalTrainingProviders.toString());
        } else {
            $('#ExternalTrainingProviders').val("");
        }

        var trainees = $('#ddlTrainees').val();
        if (trainees !== undefined && trainees !== null && trainees !== "") {
            $('#Trainees').val(trainees.toString());
        } else {
            $('#Trainees').val("");
        }

        $('.requiredClass').each(function () {
            var val = $(this).val();
            if (val === '' || val === null || val === undefined) {
                $(this).addClass('requiredTxt');
                check = false;
            } else {
                $(this).removeClass('requiredTxt');
            }

        });
        if (!check) {
            notif({
                msg: "<b>Error :</b> Please ensure that all fields that are required are filled in.",
                type: "error",
                multiline: true
            });
        }
        var from = $("#txtStartDate").val();
        var to = $("#txtEndDate").val();

        if (from != "" && from != null && to != null && to != "") {

            if (Date.parse(from) > Date.parse(to)) {
                notif({
                    msg: "<b>Error :</b> Please ensure that your start date and time is before your end date and time.",
                    type: "error",
                    multiline: true
                });
                check = false;
            }

        }

        $('#EndDate').val($('#txtEndDate').val());
        $('#StartDate').val($('#txtStartDate').val());
        
        return check;
    }

    //Except only numbers for textbox
    function onlyNumberWithDot(event) {
        var charCode = (event.which) ? event.which : event.keyCode;
        if (charCode == 46) {
            return true;
        }
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    //Except only numbers for textbox
    function onlyNumbers(event) {
        var charCode = (event.which) ? event.which : event.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    //upload document logic

     var vm = app.data.crudController(@Html.ToJson(Model),@Html.ToJson((IDictionary<string,string>)ViewBag.Links),@Html.ToJson((string)ViewBag.Mode));
    _init();

    ko.applyBindings(vm,document.getElementsByTagName('body')[0]);


    function _utils_array_find(list, comparer) {
        var model = null;
        $.each(ko.isObservable(list) ? ko.unwrap(list) : list, function () {
            if (comparer(ko.unwrap(this)))
                model = this;
        });
        return model;
    }
    function _utils_array_remove(entry, list, comparer) {
        var model = null;

        entry = ko.isObservable(entry) ? ko.unwrap(entry) : entry;
        $.each(ko.isObservable(list) ? ko.unwrap(list) : list, function () {
            if (comparer(ko.unwrap(this)))
                model = this;
        });
        if (!model)
            return;
        ko.isObservable(list) ? list.remove(model) : list.splice(list.indexOf(model),1);
    }
    function _utils_array_sync(entries, observableArray) {
        observableArray.removeAll();
        $.each(ko.unwrap(entries), function () {
            var observable = !ko.isObservable(this) ? ko.observable(this) : this;
            observableArray.push(observable);
        });
    }
    function _utils_array_copy(entries, array) {
        array.splice(0, array.length);
        $.each(entries, function () {
            array.push(this);
        });
    }
    function _utils_array_async_fromUrl(actionUrl) {
        return $.ajax({
            method: 'get',
            url: actionUrl
        });
    }
    function _utils_validate_email(email) {
        var re = /^(([^<>()\[\]\\.,;:\s@@"]+(\.[^<>()\[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
    }
    function _utils_observable_clone(observable) {
        return ko.mapping.fromJS(ko.mapping.toJS(observable));
    }
    function _utils() {
        return {
            array: {
                find: _utils_array_find,
                remove: _utils_array_remove,
                sync: _utils_array_sync,
                copy : _utils_array_copy,
                async: {
                    fromUrl : _utils_array_async_fromUrl
                }
            },
            validate: {
                email: _utils_validate_email
            },
            observable: {
                clone : _utils_observable_clone
            }
        };
    }
    function _trainingActivityType_current() {
        if (ko.unwrap(vm.data.TrainingActivityType == null || ko.unwrap(vm.data.TrainingActivityType) == undefined)) {
            var t = window.location.href.substring(window.location.href.indexOf('TrainingActivityType'));
            t = t.substring(t.indexOf('=') + 1);
            return t;
        }
        else
            return ko.unwrap(vm.data.TrainingActivityType).toString();
    }
    function _trainingActivityType_from_description(desc) {
        var match = vm.utils.array.find(vm.trainingActivityType.list(), function (x) { return x.Text === desc || x.Value === desc; });
        return match ? match.Value.toString() : null;
    }
    function _trainingActivityType_executeDelegateOn(targetType, delegate) {
        if (vm.trainingActivityType.current() === vm.trainingActivityType.from.description(targetType))
            delegate();
    }
    function _trainingActivityType() {
        return {
            current: _trainingActivityType_current,
            from: {
                description: _trainingActivityType_from_description,
            },
            executeDelegateOn: _trainingActivityType_executeDelegateOn,
            list: _trainingActivityType_list
        }
    }

    function _upload_options() {

        return {
            showProgress: false,
            url: "@Url.Action("POST", "Upload", new { Area = "" })",
            before: _upload_eventHandlers_onBeforeUpload,
            success: _upload_eventHandlers_onUploadSuccess,
            error: _upload_eventHandlers_onUploadError,
            onProgress: _upload_eventHandlers_onUploadProgress,
            autoupload: false
        };
    }
    function _upload_eventHandlers_onBeforeUpload(element, fileName, valueProperty) {
        var result = false;
        var ext = fileName.substring(fileName.lastIndexOf('.') + 1).toUpperCase();
        var acceptedImageFileTypes = [
            "PNG",
            "JPEG",
            "JPG",
            "GIF",
            "BMP"
        ];
        var acceptedDocumentfileTypes = [
            "PPSX",
            "PPS",
            "DOC",
            "DOCX",
            "XLS",
            "XLSX",
            "PPT",
            "PPTX",
            "PDF"
        ];
        var accepted = false;
        if (ko.unwrap(vm.documentsTab)) {

            accepted = vm.utils.array.find(acceptedDocumentfileTypes, function(extension) { return extension.toString() === ext; });
        } else {
            accepted = vm.utils.array.find(acceptedDocumentfileTypes, function(extension) { return extension.toString() === ext; });
            if (!accepted)
                accepted = vm.utils.array.find(acceptedImageFileTypes, function(extension) { return extension.toString() === ext; });
        }
        if (accepted) {
            ko.unwrap(valueProperty).Type(vm.upload.type.from.description(ko.unwrap(vm.documentsTab) ? 'Training Activity Document' : 'Training Activity Invoice'));
            ko.unwrap(valueProperty).InProcess(true);
            ko.unwrap(valueProperty).Progress(0 + '%');
            if (vm.documentsTab()) {
                vm.data.Documents.push(valueProperty);
                //console.log(ko.unwrap(valueProperty));
            } else {
                console.log(ko.unwrap(valueProperty));

                var type = $("#TrainingActivityType option:selected").text();
                if (type === 'External') {
                    vm.data.ExternalTrainingActivityDetail.Invoices.push(valueProperty);
                }
                if (type === 'Bursary') {
                    vm.data.BursaryTrainingActivityDetail.Invoices.push(valueProperty);
                }
                vm.trainingActivityType.executeDelegateOn('External', function () {
                    vm.data.ExternalTrainingActivityDetail().Invoices.push(valueProperty);

                });
                // commented because it adds data one more time leading to redundancy
                //vm.trainingActivityType.executeDelegateOn('Bursary', function () { vm.data.BursaryTrainingActivityDetail.Invoices.push(valueProperty); });
            }
            result = true;
        } else {
            notif({ type: 'error', msg: 'Please select a Document To Upload' });
        }
        return result;
    }
    var uploadId = new Array();
    var BursaryInvoiceId = new Array();
    var ExternalInvoiceId = new Array();
    function _upload_eventHandlers_onUploadSuccess(data, textStatus, xhr, valueProperty) {

        var type = $("#TrainingActivityType option:selected").text();
        if (type === 'External' && !vm.documentsTab()) {
            ExternalInvoiceId.push(ko.unwrap(data).Id);
            ExternalInvoiceId = $.unique(ExternalInvoiceId);
            $('#ExternalInvoiceIds').val(ExternalInvoiceId.toString());
        }
        else if (type === 'Bursary' && !vm.documentsTab()) {
            BursaryInvoiceId.push(ko.unwrap(data).Id);
            BursaryInvoiceId = $.unique(BursaryInvoiceId);
            $('#BursaryInvoiceIds').val(BursaryInvoiceId.toString());
        } else {
            uploadId.push(ko.unwrap(data).Id);
            uploadId = $.unique(uploadId);
            $('#UploadIds').val(uploadId.toString());
        }

        var filename = valueProperty().Description();
        var ext = filename.substring(filename.lastIndexOf('.'));
        valueProperty().Description(filename.replace(ext, ''));
    }
    function _upload_eventHandlers_onUploadError(valueProperty) {

    }
    function _upload_open(data) {

        var newElement = $('<input data-bind="fileUpload:new ko.observable(),fileuploadOptions:vm.upload.options,valueProperty:new vm.upload.model()" class="upload hidden" type="file" name="files[]" accept="pdf" />');
        $(newElement).appendTo('#inputs');
        ko.applyBindingsToNode(newElement[0], null, data);
        $(newElement).click();
    }
    function _upload_type_from_description(desc) {
        var match = vm.utils.array.find(vm.upload.type.list(), function (x) { return x.Text === desc || x.Value === desc; });
        return match ? match.Value.toString() : null;
    }
    function _upload_eventHandlers_onUploadProgress(event, position, total, percentage, fileName, valueProperty, submitEvent, valueAccessor, container) {
        valueProperty().Progress(percentage + "%");
        valueProperty().Size(total);
    }
    function _upload_delete_document(doc) {

        vm.upload.delete.fromUrl(doc)
            .then(function (data) { if (data) { vm.utils.array.remove(doc, vm.data.Documents, function (x) { return ko.unwrap(x.Id) == ko.unwrap(doc.Id); }); } else { notif({ type: 'error', msg: 'Delete Failed' }); } }, function (msg) { notif({ type: 'error', msg: 'Delete Failed' }); });
    }
    function _upload_delete_invoice(inv) {
        vm.upload.delete.fromUrl(inv).then(function (data) {
            if (data) {
                vm.trainingActivityType.executeDelegateOn('External', function () {
                    vm.utils.array.remove(inv, vm.data.ExternalTrainingActivityDetail().Invoices, function (x) { return ko.unwrap(x.Id) == ko.unwrap(inv.Id); });
                });
                vm.trainingActivityType.executeDelegateOn('Bursary', function () {
                    vm.utils.array.remove(inv, vm.data.BursaryTrainingActivityDetail.Invoices, function (x) { return ko.unwrap(x.Id) == ko.unwrap(inv.Id); });
                });
            }
            else {
                notif({ type: 'error', msg: 'Delete Failed' });
            }
        }, function (msg) { notif({ type: 'error', msg: 'Delete Failed' }); });
    }
    function _upload_delete_fromUrl(upload){
        console.log(ko.unwrap(upload.Id));
        uploadId.splice($.inArray(ko.unwrap(upload.Id), uploadId), 1);
        console.log("after delete " + uploadId);
        $('#UploadIds').val(uploadId.toString());
        console.log($('#UploadIds').val());

        return $.ajax({
            method: 'delete',
            url: ko.unwrap(upload.DeleteUrl)
        });
    }
    function _upload_model(type) {
        var temp = vm.template.upload;
        temp.Type(type);
        return new ko.observable(temp);
    }
    function _upload() {
        return {
            options: _upload_options(),
            eventHandlers: {
                onBeforeUpload: _upload_eventHandlers_onBeforeUpload,
                onUploadSuccess: _upload_eventHandlers_onUploadSuccess,
                onUploadError: _upload_eventHandlers_onUploadError
            },
            open: _upload_open,
            type: {
                list: _upload_type_list,
                from: {
                    description: _upload_type_from_description
                }
            },
            delete: {
                document: _upload_delete_document,
                invoice: _upload_delete_invoice,
                fromUrl : _upload_delete_fromUrl
            },
            model : _upload_model
        };
    }

    function _cache_externalTrainingProviders_refresh() {
        vm.cache.externalTrainingProviders.data(!vm.cache.externalTrainingProviders.data());
    }
    function _cache() {
        return {
            externalTrainingProviders: {
                data : ko.observable(false),
                refresh: _cache_externalTrainingProviders_refresh
            }
        };
    }

     function _trainingActivityType_list() {
        return [
            { Value: @Html.ToJson((int)TrainingActivityType.Bursary), Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<TrainingActivityType>(TrainingActivityType.Bursary)) },
            { Value: @Html.ToJson((int)TrainingActivityType.External), Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<TrainingActivityType>(TrainingActivityType.External)) },
            { Value: @Html.ToJson((int)TrainingActivityType.Internal), Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<TrainingActivityType>(TrainingActivityType.Internal)) },
            { Value: @Html.ToJson((int)TrainingActivityType.MentoringAndCoaching), Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<TrainingActivityType>(TrainingActivityType.MentoringAndCoaching)) },
            { Value: @Html.ToJson((int)TrainingActivityType.ToolboxTalk), Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<TrainingActivityType>(TrainingActivityType.ToolboxTalk)) }
        ];
    }
    function _upload_type_list() {
        return [
            { Value: @Html.ToJson((int)FileUploadType.TrainingActivityDocument),Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<FileUploadType>(FileUploadType.TrainingActivityDocument)) },
            { Value: @Html.ToJson((int)FileUploadType.TrainingActivityInvoice),Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<FileUploadType>(FileUploadType.TrainingActivityInvoice)) }
        ];
    }

    function _upload_type_list() {
        return [
            { Value: @Html.ToJson((int)FileUploadType.TrainingActivityDocument),Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<FileUploadType>(FileUploadType.TrainingActivityDocument)) },
            { Value: @Html.ToJson((int)FileUploadType.TrainingActivityInvoice),Text: @Html.ToJson(VirtuaCon.EnumUtility.GetFriendlyName<FileUploadType>(FileUploadType.TrainingActivityInvoice)) }
        ];
    }
    function _init() {
        vm.trainingActivityType = _trainingActivityType();
        vm.utils = _utils();
        vm.upload = _upload();
        vm.cache = _cache();

        //observables
        vm.documentsTab = ko.observable(true);
        vm.modalHeader = ko.observable();
        vm.users = ko.observableArray();
        vm.userSearch = ko.observable();
        vm.uploadModel = ko.observable();


        vm.template = {
            upload: ko.mapping.fromJS(@Html.ToJson(new FileUploadResultViewModel())),
            externalTrainingProvider: ko.mapping.fromJS(@Html.ToJson(new ExternalTrainingProviderModel())),
            trainingLabel: ko.mapping.fromJS(@Html.ToJson(new TrainingLabelModel()))
        };

        //computed observables
        vm.showInvoices = ko.computed(function () { return ko.unwrap(vm.data.ExternalTrainingActivityDetail) || ko.unwrap(vm.data.BursaryTrainingActivityDetail); });
        vm.getHeight = ko.computed(function () { return ko.unwrap(vm.data.BursaryTrainingActivityDetail) ? '431px' : '345px'; });

    };

</script>

