@model Ramp.Contracts.ViewModel.CourseModel
@using Common.Web
@using Web.UI.Code.Extensions
@using System.Threading
@using Ramp.Security.Authorization
@{
    Layout = "~/Views/Shared/_LayoutStandardUser.cshtml";
}
<link href="~/Scripts/themes/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/Scripts/themes/bootstrap-multiselect.js"></script>

<style>

      .switch {
        vertical-align: middle;
        position: relative;
        display: inline-block;
        width: 2.4em;
        height: 1.4em;
    }

        .switch input {
            display: none;
        }

        .switch + span {
            vertical-align: middle;
        }


    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        -ms-transition: .4s;
        -o-transition: .4s;
        transition: .4s
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 1em;
            width: 1em;
            left: 0.2em;
            bottom: 0.2em;
            background-color: white;
            -webkit-transition: .4s;
            -ms-transition: .4s;
            -o-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider:before {
        -ms-transform: translateX(1em);
        -webkit-transform: translateX(1em);
        transform: translateX(1em);
    }

    .slider.round {
        border-radius: 0.7em;
    }

        .slider.round:before {
            border-radius: 50%;
        }

     #jstree-marker {
     #jstree-marker {
        z-index: 1100;
    }
    }
    #manageCategoriesModal {
        overflow-x: auto;
    }
    #manageCategoriesModal .modal-dialog {
        display: table;
    }
    .policy-icon {
        background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.PolicyType], true)') !important;
        -ms-background-size: 24px;
        background-size: 24px;
        -ms-background-position: 0 !important;
        background-position: 0 !important;
    }

    .memo-icon {
        background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.MemoType], true)') !important;
        -ms-background-size: 24px;
        background-size: 24px;
        -ms-background-position: 0 !important;
        background-position: 0 !important;
    }
    .test-icon {
        background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.TestType], true)') !important;
        -ms-background-size: 24px;
        background-size: 24px;
        -ms-background-position: 0 !important;
        background-position: 0 !important;
    }
    .training-manual-icon {
        background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.TrainingManualType], true)') !important;
        -ms-background-size: 24px;
        background-size: 24px;
        -ms-background-position: 0 !important;
        background-position: 0 !important;
    }
    .checklist-icon {
        background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.CheckListType], true)') !important;
        -ms-background-size: 24px;
        background-size: 24px;
        -ms-background-position: 0 !important;
        background-position: 0 !important;
    }
    .form-inline .twitter-typeahead {
        width: auto;
        float: none;
        vertical-align: middle;
    }

    .document-panelbody {
        max-height: 468px;
        overflow-y: auto;
        padding: 0;
    }

        .document-panelbody > table {
            margin: 0;
        }

    .spacer {
        margin-top: 6em;
    }

    .hover-zoom {
        zoom: 1;
    }

        .hover-zoom:hover {
            -ms-transition: transform .15s ease-in-out;
            -o-transition: transform .15s ease-in-out;
            -webkit-transition: transform .15s ease-in-out;
            -ms-transition: transform .15s ease-in-out;
            -o-transition: transform .15s ease-in-out;
            -webkit-transition: transform .15s ease-in-out;
            transition: transform .15s ease-in-out;
            transform: scale(1.1)
        }

    .not-selected, .not-selected > img {
        zoom: 1;
        filter: alpha(opacity=50);
        -ms-opacity: 0.5;
        opacity: 0.5;
    }

        .not-selected:hover, .not-selected > img:hover {
            filter: alpha(opacity=100);
            -ms-opacity: 1;
            opacity: 1;
            -ms-transition: all .15s ease-in-out;
            -o-transition: all .15s ease-in-out;
            -webkit-transition: all .15s ease-in-out;
            transition: all .15s ease-in-out;
            -ms-transform: scale(1.1);
            -webkit-transform: scale(1.1);
            transform: scale(1.1)
        }

    .no-underline:hover, .no-underline:focus {
        text-decoration: none;
    }

    .panel-container > div.panel:last-child {
        margin-bottom: 0;
    }

    .selected {
        background-color: #666;
        color: #fff;
    }

    .title {
        width: 80%;
        float: left;
        font-weight: bold;
        padding: 8px;
        border: 1px solid #ddd;
        margin: 0px 0px 0px 0px
    }

    .noOfUsers {
        width: 20%;
        float: right;
        font-weight: bold;
        padding: 8px;
        border: 1px solid #ddd;
        margin: 0px 0px 0px 0px
    }

    .title-value {
        width: 80%;
        float: left;
        border: 1px solid #ddd;
        padding: 1px;
        line-height: 1.42857143;
        background-color: #f9f9f9
    }
     .untitle-value {
        width: 80%;
        float: left;
        border: 1px solid #ddd;
        padding: 8px;
        line-height: 1.42857143;
        background-color: #f9f9f9
    }

    .noOfUsers-value {
        width: 20%;
        float: right;
        border: 1px solid #ddd;
        padding: 8px;
        line-height: 1.42857143;
        background-color: #f9f9f9
    }

    table th {
    position:sticky;
    top:0;
    z-index:1;
    background: #ededed;
   }



</style>

<link href="~/Scripts/themes/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/Scripts/themes/bootstrap-multiselect.js"></script>
<script src="~/Scripts/jstree.js"></script>
<link href="~/Content/jstree/dist/themes/default/style.css" rel="stylesheet" />

<script>
    $(document).ready(function () {
        $('.multiselect').multiselect({
            includeSelectAllOption: true,
            buttonWidth: 250,
            enableFiltering: true,
            maxHeight: 350
        });
    });
</script>

<body>
    <div class="modal fade" id="loginmodal1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header modalSearch">
                    <button type="button" class="close" data-dismiss="" data-bind="click: $root.close('#loginmodal1')">
                        <span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                    </button>
                    <h4 class="modal-title">Course Details</h4>
                </div>
                <div class="modal-body">
                    @*@using (Html.BeginForm("Index", "Course"))
                        {*@
                    <div class="row" data-bind="with:data">
                        <div class="col-sm-12">
                            <div class="form-group">
                                <label class="control-label">Title</label>
                                <input type="text" class="form-control" data-bind="textInput:Title" name="Title" id="Title" />
                            </div>

                            <div class="form-group">
                                <label class="control-label">Description</label>
                                <input type="text" class="form-control" data-bind="textInput:Description" name="Title" />
                            </div>

                            <div class="form-group">
                                <label>Allocated Admins</label><br />

                                <select id="users-multiselect-demo">
                                    @if (ViewBag.Admins != null)
                                    {
                                        foreach (var item in ViewBag.Admins)
                                        {
                                            <option value="@item.Id">@item.Value</option>
                                        }
                                    }
                                </select>
                            </div>

                            <div class="form-group">
                                <label>Categories</label><br />
                                <select id="categories-multiselect-demo">
                                    @foreach (var item in ViewBag.Categories)
                                    {
                                        <option value="@item.Value">@item.Text.Trim()</option>
                                    }
                                </select>
                            </div>


                            <div class="form-group" data-bind="with:$root.modals.certificate">
                                <button id="openCertModal" class="btn btn-default">Select Achievement</button>
                                <button data-bind="visible: vm.certificates().length > 0" id="delCert" class="btn btn-default"><span class="fa fa-trash"></span></button>
                            </div>
                            @*neeraj*@
                            <div data-bind="if: vm.certificates().length > 0">

                                <div class="form-group" data-bind="with: vm.certificates()[0]">
                                    <label id="certificate" class="control-label">Certificate : </label>
                                    @*<pre data-bind="text: ko.toJSON($data, null, 2)"></pre>*@

                                    <div class="thumbnail" style="overflow: hidden; width: 120px">
                                        <img data-bind="attr: { src: ko.unwrap(ThumbnailUrl) ? ko.unwrap(ThumbnailUrl) : ko.unwrap(Url), alt: Description }" />
                                    </div>
                                </div>

                            </div>

                            @*<div class="form-group" data-bind="ifnot: Certificate">
            <label class="control-label">Certificate : None Selected</label>
        </div>*@


                            <div class="form-group">
                                <label><span style="color:red"><b>*</b></span> From Date</label>
                                <div id="fromDate" class="input-group" data-bind="datepicker: fromDate">
                                    @*<input id="txtFromdate" type="text" class="form-control cssDatePicker" style="max-width: none" autocomplete="off" />*@
                                    @Html.TextBoxFor(m => m.StartDate, new { @class = "input-group" })
                                    <span class="input-group-addon">
                                        <i class="fa fa-calendar"></i>
                                    </span>
                                </div>
                            </div>
                            <div class="form-group">
                                <label><span style="color:red"><b>*</b></span> To Date</label>
                                <div id="toDate" class="input-group" data-bind="datepicker: toDate">
                                    @*<input id="txtTodate" type="text" class="form-control cssDatePicker" style="max-width: none" autocomplete="off" />*@
                                    @Html.TextBoxFor(m => m.EndDate, new { @class = "input-group" })
                                    <span class="input-group-addon">
                                        <i class="fa fa-calendar"></i>
                                    </span>
                                </div>
                            </div>

                            @*paste commented code here*@

                            <div class="form-group">
                                <label class="switch">
                                    <input type="checkbox" name="IsGlobalEnabled" data-bind="checked: IsGlobalEnabled" />
                                    @*@Html.CheckBox("IsGlobalAccessed")*@
                                    <span class="slider round"></span>
                                </label>
                                <span>Enable global access</span>
                            </div>
                            <div>
                                <label class="switch">
                                    <input type="checkbox" data-bind="checked: WorkflowEnabled" name="EnableTimer" />
                                    <span class="slider round"></span>
                                </label>
                                <span>Enable Workflow</span>
                            </div>

                            <div>
                                <label class="switch">
                                    <input type="checkbox" data-bind="checked: IsCourseExpiryEnabled" name="EnableTimer" />
                                    <span class="slider round"></span>
                                </label>
                                <span>Enable Expiry</span>
                            </div>

                            <div class="form-group" data-bind="visible:IsCourseExpiryEnabled">
                                <label class="control-label">No of days from expiry</label>
                                <input type="text" class="form-control" data-bind="textInput:ExpiryInDays" name="ExpiryInDays" />
                            </div>


                            <div class="form-group">
                                <label class="control-label">Cover Picture</label>
                                <div data-bind="with:CoverPicture">
                                    <img class="img-responsive coverPicture" data-bind="attr:{src:$data.Url()},click:app.data.plugins.blueimpGallary.trigger.bind($data)" />
                                </div></br>
                                <button id="coverPicture" class="btn btn-default" data-bind="click:function(){ $('.coverPictureUpload').trigger('click');}">Set / Change Cover Picture</button>
                                <button class="btn btn-default" data-bind="visible:CoverPicture,click:function(){$root.data.CoverPicture(null);}"><span class="fa fa-trash"></span></button>
                                <input data-bind="fileUpload:CoverPictureUpload,fileuploadOptions:$root.upload.options.coverPicture,valueProperty:CoverPicture" type="file" name="files[]" accept="image/*" class="hidden coverPictureUpload">
                            </div>
                            <div class="form-group has-error errorsSpan" data-bind="visible:$root.UploadCoverPictureError">
                                <span>Error uploading CoverPicture</span>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-7">
                            <button data-bind="enable: validation()" id="save" class="btn btn-primary">Next</button>
                        </div>
                    </div>
                    @*}*@

                </div>


            </div>
        </div>
    </div>

    <div class="modal fade" id="certificateModal" tabindex="-1" role="dialog" aria-labelledby="certificateModals" aria-hidden="true" data-bind="with:$root.modals.certificate">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header modalSearch">
                    <button type="button" class="close" data-dismiss="" data-bind="click:close.bind()"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title">Certificates</h4>
                </div>
                <div class="modal-body">

                    <div class="row">
                        <div class="col-sm-12">
                            <!-- ko foreach:data -->
                            <div class="col-sm-3">
                                <a data-bind="click:$parent.set.bind()">
                                    <img class="img-responsive center-block" data-bind="attr:{src:ThumbnailUrl},click:app.data.plugins.blueimpGallary.trigger.bind($data)" />
                                    <div class="text-center" data-bind="text:(ko.unwrap(Description) || '').substring(0,20)" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis"></div>
                                </a>
                            </div>
                            <!-- /ko -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div id="assignModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header modalSearch">
                    <button type="button" class="close" data-bind="click: $root.close('#assignModal')">
                        <span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                    </button>
                    <h4 class="modal-title">Select the document for your course</h4>
                </div>
                <div class="modal-body">
                    <p>Please select the documents you would like to add to course.</p>
                    <br>
                    <div class="tree" id="tree"></div>
                    @*<!-- ko ifnot: isDocumentGet -->
                         <div>
                            Please wait while we fetch your documents
                          </div>
                        <!-- /ko -->*@
                </div>
                <div class="modal-footer">
                    <div class="text-center">
                        <div class="btn-group">
                            <button class="btn btn-primary" id="courseNext" data-bind="enable:DocumentsInJSTree().length>
                                0">
                                Next
                            </button>
                            <button class="btn btn-default" data-bind="click: $root.back.bind($data,'#assignModal')">Back</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div id="courseSummary" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header modalSearch">
                    <button type="button" class="close" data-bind="click:$root.close('#courseSummary')">
                        <span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                    </button>
                    <h4 class="modal-title">Course summary</h4>
                </div>
                <div class="modal-body">

                    <div style="border: 1px solid gray;
    box-shadow: 2px 3px #888888;
    text-align: center;
    margin-bottom: 3rem;">
                        <p>Course Information</p>
                        <h1 bind="text: Description"></h1>

                        <div style="display: flex;justify-content: space-around;">
                            <div>document logo here</div>
                            <div>
                                document info here
                                <span data-bind="text: data.Title"></span>
                                <span data-bind="text: data.Description"></span>
                            </div>
                        </div>

                        <p style="text-align: center;">
                            <span>Expires In: <span data-bind="text: data.ExpiryInDays"></span></span>
                            <span>GlobalAccess: <span data-bind="text: data.IsGlobalEnabled"></span></span>
                        </p>
                    </div>

                    <div style="display: flex;justify-content: space-around;">
                        <div style="border: 1px solid gray;
    box-shadow: 2px 3px #888888;
    text-align: center;
    margin-bottom: 3rem;
    width:45%">
                            <p> Document Assigned</p>
                            <table>
                                <thead>
                                    <tr><th>Type</th><th>Title</th></tr>
                                </thead>
                                <tbody data-bind="foreach: DocumentsInJSTree">
                                    <tr>
                                        <td data-bind="text: type"></td>
                                        <td data-bind="text: text"></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div style="border: 1px solid gray;
    box-shadow: 2px 3px #888888;
    text-align: center;
    margin-bottom: 3rem;
    width:45%">
                            <p>Achievements</p>

                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="text-center">
                        <div class="btn-group">
                            <button class="btn btn-primary" data-bind="click: save.bind($data, 0)">Save and Exit</button>
                            <button class="btn btn-primary" data-bind="click: save.bind($data, 1)">Save and Publish</button>
                            <button class="btn btn-default" data-bind="click: $root.back.bind($data, '#courseSummary')">Back</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="assignDocumentToUserModal" class="modal fade" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-toggle="modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header modalSearch">
                    <button type="button" class="close" data-dismiss="" data-bind="click: $root.close('#assignDocumentToUserModal')"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title">User & Group selection</h4>
                </div>
                <div class="modal-body">
                    @*data-bind="visible: selectedDocuments().length > 0"*@
                    <div>
                        <div>
                            <p>Please select the Groups or Users you would like to perform the action on:</p>
                            <br>
                            @*data-bind="visible: selectedDocuments().length > 0"*@
                            <div>
                                <div>
                                    <select class="multiselect" id="boot-multiselect-demo" multiple="multiple">
                                        @foreach (var item in ViewBag.Groups)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    </select>
                                </div><br />
                            </div>
                            <div data-bind="foreach: allusers">
                                <table class="table table-striped table-bordered">
                                    <thead>
                                        <tr>
                                            <th>
                                                <input type="text" placeholder="Search Users" class="form-control" data-bind="textInput: $root.userFilter('')" />
                                            </th>
                                            <th style="width: 130px">
                                                <div class="checkbox">
                                                    <label>
                                                        <input type="checkbox" data-bind="checked: $root.allUsersSelected($element)" /> Assign All
                                                    </label>
                                                </div>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody data-bind="foreach: users" style="display: table-caption;height: 200px;caption-side: bottom;overflow: auto;">
                                        <tr>
                                            <td style="width:437px;">
                                                <span data-bind="text: Name"></span>
                                                <span class="fa fa-info-circle" style="color:orange" data-bind="visible: AssignedDocumentUsers.length > 0, bootstrapPopover: ko.unwrap(AssignedDocumentUsers)"></span>
                                                <br>
                                            </td>
                                            <td class="text-center" style="width:113px;">
                                                <input class="sauassign" type="checkbox" data-bind="checked: $root.selectedUsersPerDocument, value: Id + ';' + GroupId " />
                                            </td>
                                        </tr>
                                    </tbody>
                                    <tbody>
                                        @*<tr>
                                                <td colspan="2" class="text-center">No matching users found</td>
                                            </tr>*@
                                    </tbody>
                                </table>
                            </div>
                            @*<p class="text-center">
                                    <span>
                                        Please wait while we fetch your users
                                    </span>
                                </p>*@
                        </div>

                    </div>
                </div>
                <div class="modal-footer">
                    <div class="text-center">
                        <div class="btn-group">
                            <button class="btn btn-primary" id="userSelected" data-bind="enable: selectedUsersPerDocument().length >0">Next</button>
                            <button data-bind="click: $root.back.bind($data, '#assignDocumentToUserModal')" class="btn btn-default" data-dismiss="modal">Back</button>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</body>

<script>
    $(document).ready(function () {
        $("#loginmodal1").modal('show');
    });

    $("#submit").click((data) => {
        console.log("data ", data);
    })

    $("#save").click((ele) => {
        $("#loginmodal1").modal("hide");
        $("#assignModal").modal("show");
    })

    $("#courseNext").click(ele => {
        $("#assignModal").modal("hide");
        $("#assignDocumentToUserModal").modal("show");

    })

</script>



<script>
    var vm = new app.data.documentController(@Html.ToJson(Model), @Html.ToJson((IEnumerable<dynamic>) ViewBag.Groups),
        null,null, null,'',
        [
            "image:png", "image:jpeg", "image:jpg", "image:gif", "image:bmp", "video:mp4", "document:ppsx", "document:pps", "document:docx", "document:xls", "document:xlsx", "document:ppt", "document:pptx", "document:pdf", "document:csv",
            "audio:mp3"
        ],
    @Html.ToJson(new Ramp.Contracts.ViewModel.FileUploadResultViewModel()),
        120 * 1000);

    var selectedDocumentsInJSTree = [];
    var selectedUserGroupIds = [];
    var selectedDocumentId = [];
    var selectedDocuments = [];
    //var selectedUsers = [];
    var allUserList = [];
    var assignedUsers = [];

    //cehck neeraj
    vm.check = () => { console.log("asdsadas")}
    //cehck

    self.isDocumentGet = ko.observable(false);
    self.isDocumentGet.subscribe(function (changes) {
    });

    function isUnique(node) {
        var tree = $('.tree').jstree(true);
        var collection = tree.get_node('#').children_d;
        $(".tree").jstree(true).load_node('#');
        collection = $.map(collection,
            function (id) {
                return tree.get_node(id);
            });
        for (var i = 0; i < collection.length; i++) {
            if (node.id === collection[i].id || collection[i].type !== 'default') continue;
            var current = collection[i].text;
            current = current.toLowerCase().replace(' ', '').trim();
            if (current.indexOf('\n') > 0) {
                current = current.substring(0, current.indexOf('\n'));
            }
            if (node.text.toLowerCase().replace(' ', '').trim() === current) {
                return false;
            }
        }
        return true;
    }

    function containsDocument(collection) {
        for (var i = 0; i < collection.length; i++) {
            if (collection[i].type !== 'default') {
                return true;
            }
        }
        return false;
    }

    //var Controller = function(documents, groups) {
        var self = vm;
        var tree = $('.tree');
        var to = false;
        self.certificates = ko.observableArray([]);
        self.hasData = ko.observable(false);
        self.isUserGet = ko.observable(false);
        self.isUserGet.subscribe(function (changes) {
        });
        self.selectedUsersPerDocument = ko.observableArray();
        self.selectedAction = ko.observable(null);
        self.selectedAction.subscribe(function (newValue) {
            loadUsers();
            self.selectedUsersPerDocument([]);
        });
        self.assignedusers = ko.observableArray([]);
        self.assignedusers.subscribe(function (changes) {
        });
        self.selectedUsers = ko.observableArray();
    if (!ko.isObservable(self.data.CoverPicture)) {
        self.data.CoverPicture = ko.observable(self.data.CoverPicture);
    }

        self.data.fromDate = ko.observable();
        self.data.fromDate.subscribe(function (newValue) {
            $('#toDate').data('DateTimePicker').minDate(new Date(newValue));
            self.hasData(false);
    });

        self.data.toDate = ko.observable();
        self.data.toDate.subscribe(function (newValue) {
            $('#fromDate').data('DateTimePicker').maxDate(new Date(newValue));
            self.hasData(false);
        });

        $('#categorySearch').keyup(function() {
            if (to) {
                clearTimeout(to);
            }
            to = setTimeout(function() {
                    var value = $('#categorySearch').val();
                    tree.jstree(true).search(value);
                },
                250);
        });
        $('#categorySearchClear').click(function(e) {
            $('#categorySearch').val('')
                .trigger('keyup').focus();
        });

        $('#users-multiselect-demo').change(function () {
            var userIds = $(this).val();

            if (userIds == null || typeof (userIds) == 'undefined') {
                self.data.AllocatedAdmins();
            } else {
                self.data.AllocatedAdmins(userIds);
            }

        })

        $("#userSelected").click(function () {

            console.log("model ", @Html.Raw(Json.Encode(Model)))

            $('#assignDocumentToUserModal').modal('hide');
            $('#courseSummary').modal('show');

        })

    vm.validation = ko.observable(false);

    vm.save = function (data1, check) {

        let docs = [];
        debugger
        vm.DocumentsInJSTree().forEach(d => {
            let x = {
                Title: d.text,
                Id: d.id,
                Type: d.type,
                OrderNo: 0
            }
            docs.push(x);
        })

        let data = {
            Id: null,
            Title: vm.data.Title(),
            Description: vm.data.Description(),
            CoverPicture: null,
            IsGlobalEnabled: vm.data.IsGlobalEnabled(),
            IsCourseExpiryEnabled: vm.data.IsCourseExpiryEnabled(),
            ExpiryInDays: parseInt(vm.data.ExpiryInDays()),
            AchievementType: vm.certificates().length > 0 ? vm.certificates()[0].Id : null,
            WorkflowEnabled: vm.data.WorkflowEnabled(),
            AllocatedAdmins: vm.data.AllocatedAdmins(),
            CategoryId: vm.data.CategoryId(),
            StartDate: vm.data.fromDate(),
            EndDate: vm.data.toDate(),
            AssignedUsers: vm.selectedUsersPerDocument(),
            Documents: docs,
            Certificate: vm.certificates(),

        }

        console.log("data 1", data);
        console.log("data ", check);

        if (check == 0) {
            //save and exit
            data.CourseStatus = 1
        }
        else if (check == 1) {
            //save and publish
            data.CourseStatus = 2;
        }

        $('#LoadingImageDiv').show();
            var url = '@Url.Action("CourseWorkFlowMessageSave")';
            $.ajax({
                    method: 'POST',
                url: url,
                data: data
                })
                .done(function (data) {
                    notif({
                        msg: 'Your progress has been saved.',
                        multiline: true,
                        type: 'success'
                    });
                    //window.location.assign("/Document/MyDocuments");
                })
                .always(function() {
                    $('#LoadingImageDiv').hide();
                });
    }

    $("#Title").change((val) => {
        //console.log("value ", val);
        checkValidation();
    })

    function checkValidation() {
        let title = $('#Title').val()
        let category = $('#categories-multiselect-demo').val()

        if (title != null && category != null)
            vm.validation(true);
    }


        //new code start
        self.userFilter = function (documentId) {
            //console.log(" documentId new ", documentId)
            return ko.computed({
                read: function () {
                    //console.log(" read ", documentId)
                    if (self.query().hasOwnProperty(documentId)) {

                        return self.query()[documentId];
                    } else {

                        var query = self.query();
                        query[documentId] = '';
                        self.query(query);
                        return '';
                    }
                },
                write: function (value) {

                    //console.log(" write ", value);
                    var usersSelectedForDocument = self.allusers();
                    var actionType = self.selectedAction() === 'Assign'? "Assign": "Reassign";
                    var url = '@Url.Action("FilterUsers", "Send", new {Area = ""})';
                    $.ajax({
                        method: 'POST',
                        url: url,
                        data: {
                            documentId: "",
                            documentType: 0,
                            groupIds: selectedUserGroupIds,
                            searchText: value,
                            allDocumentId: selectedDocumentId,
                            actionType: actionType
                        }
                    }).done(function (data) {


                        var userList = {
                            users: data
                        }
                        if (value != "") {


                            self.allusers.removeAll(usersSelectedForDocument);
                            self.allusers.push(userList);
                            //console.log("users", ko.unwrap(self.allusers()));
                        } else {
                            ;
                            self.allusers.removeAll(usersSelectedForDocument);
                            self.allusers.push(userList);
                            //console.log("users", ko.unwrap(self.allusers()));
                        }
                    });
                },
                owner: this
            });
        };



        //old code start
        self.filteredUsers = function (documentId) {
            console.log("documentid..", documentId);
            return ko.computed(function () {
                var filter = self.query()[documentId].toLowerCase();
                var usersPerDocument = ko.utils.arrayFirst(self.usersPerDocument(),
                    function (item) {
                        return ko.unwrap(item.document.Id) === documentId;
                    });
                if (!usersPerDocument) return [];

                if (filter === '') {
                    return usersPerDocument.users;
                } else {
                    return ko.utils.arrayFilter(usersPerDocument.users,
                        function (item) {
                            return item.Name.toLowerCase().indexOf(filter) !== -1;
                        });
                }
            });
        }
        //old code end

        //new code start
        self.modalDocuments = ko.pureComputed(function () {
            var selections = $.map(self.selectedUsersPerDocument(),
                function (item) {
                    //;
                    return selectedDocumentSelection(item);
                });
            selectedDocuments = selections;
            console.log("selecteduser", selections);
            var url = '@Url.Action("GetDocumentType", "Send", new {Area = ""})';
            var promises = [];
            var ids = [];

                    promises.push($.ajax({
                        method: 'POST',
                        url: url,
                        data: {
                            documentId: ko.unwrap(document.id)
                        }
                    }).done(function (data) {
                        if (data.length > 0) {
                            $.each(documentId, function (i, item) {
                                if (item.id == data[0].Id) {
                                    item.type = data[0].Type;
                                }
                            });
                            newf();
                        }
                    }));

            function newf() {
                var selectedDocument = [];
                var documentId = self.DocumentsInJSTree();
                console.log("documentId vvvvvvvvvvv ", documentId)
                //;
                $.each(documentId, function (i, item) {
                    //;
                    $.each(selections, function (j, item1) {
                        //;
                        var all = {
                            documentId: item.id,
                            documentType: item.type,
                            userId: item1.userId,
                            groupId: item1.groupId
                        }
                        selectedDocument.push(all);
                        //selectedUsers = selectedDocument;
                    });
                });
                console.log("selectedDocument bbbbb", selectedDocument);
                var childDocuments = [];
                $.each(selectedDocument, function (i, item) {
                    //;
                    if (item.documentType != 0) {
                        childDocuments.push(item);
                    }
                });
                console.log("childDocuments", childDocuments);
                selectedUsers = childDocuments;
                var groupedById = childDocuments.groupBy('documentId');
                var a = self.usersPerDocument();
                return $.map(groupedById,
                    function (item) {
                        var title = ko.unwrap(self.usersPerDocument().where(function (doc) {
                            return ko.unwrap(doc.document.Id) === item.key;
                        }));
                        if (title.length > 0) {
                            title = ko.unwrap(title[0].document.Title);
                        }
                        var id = ko.unwrap(self.usersPerDocument().where(function (doc) {
                            return ko.unwrap(doc.document.Id) === item.key;
                        }));
                        if (id.length > 0) {
                            id = ko.unwrap(id[0].document.Id);
                        }
                        var type = ko.unwrap(self.usersPerDocument().where(function (doc) {
                            return ko.unwrap(doc.document.Id) === item.key;
                        }));
                        if (type.length > 0) {
                            type = ko.unwrap(type[0].document.DocumentType);
                        }
                        return {
                            title: title,
                            userCount: item.values.length,
                            additionalMsg: '',
                            id: id,
                            type: type
                        }
                    });
            }
        });

        //new code start
        self.allUsersSelected = function (element) {
            return ko.computed({
                read: function () {
                    var usersForDocument = self.allusers();
                    var usersSelectedForDocument =
                        $.grep($.map(self.selectedUsersPerDocument(),
                            function (item) {
                                return parseDocumentSelection(item);
                            }),
                            function (item) {
                                return item
                            });

                    return usersSelectedForDocument.length === usersForDocument[0].users.length;
                },
                write: function (checked) {
                    if (checked) {


                        var temp = document.getElementsByClassName("sauassign");
                        setTimeout(() => {
                            for (let i = 0; i < temp.length; i++) {
                                //console.log("i ", temp[i]);
                                temp[i].checked = true;
                            }
                        }, 100)

                        ///////////////////////

                        var usersForDocument = self.allusers();
                        var toAdd = [];
                        $.each(usersForDocument[0].users,
                            function (i, user) {
                                var fields = [
                                    user.Id,
                                    user.GroupId
                                ];
                                var item = fields.join(';');
                                if (self.selectedUsersPerDocument.indexOf(item) < 0)
                                    toAdd.push(item);
                            });
                        self.selectedUsersPerDocument.valueWillMutate();
                        self.selectedUsersPerDocument.push.apply(self.selectedUsersPerDocument, toAdd);
                        self.selectedUsersPerDocument.valueHasMutated();
                    } else {
                        deselectAllUsers();
                    }
                },
                disposeWhenNodeIsRemoved: element
            });
        }

        $('.multiselect').change(function () {
            //alert(1)
            var currentRequest = null;
            self.isUserGet(true);
            var url = self.selectedAction() === 'Assign'
                ? '@Url.Action("UsersNotAssignedCourse", "Course", new {Area = ""})'
                : '@Url.Action("UsersAssignedCourse", "Course", new {Area = ""})';

            //if (self.selectedAction() === 'Reassign') {
              //  url = '@Url.Action("UsersAssignedCourse", "Course", new {Area = ""})';
            //}
            var groupIds = $(this).val();
            if (groupIds == null) {
                groupIds = [];
            }
            var docId = self.DocumentsInJSTree();
            var documentId = [];
            $.each(docId, function (i, item) {
                documentId.push(item.id);
            });
            selectedDocumentId = documentId;

            selectedUserGroupIds = groupIds;
            if (groupIds.length > 0 && typeof groupIds != 'undefined' && groupIds != null) {
                //console.log('sending post ajax request')
                var promises = [];


                self.currentRequest = $.ajax({
                    beforeSend: function () {
                        if (self.currentRequest) {
                            self.currentRequest.abort();
                        }
                        self.allusers.removeAll();

                        var x = self.allusers();
                        self.selectedUsersPerDocument.removeAll(x);
                    },
                    method: 'POST',
                            url: url,
                            data: {
                                groupIds: groupIds,
                                allDocumentId: documentId
                            }
                        }).done(function (data) {

                            allUserList = data;
                            var assignedUser = [];
                            $.each(data,
                                function (index, userdata) {
                                    if (userdata.AssignedDocumentUsers.length > 0) {
                                        assignedUser.push(userdata);
                                    }
                                });

                            assignedusers = assignedUser;
                            var a = {
                                assigneduser: assignedUser
                            }
                            self.assignedusers.push(a);
                            self.isUserGet(false);
                            var usersSelectedForDocument = self.allusers();
                            self.allusers.removeAll(usersSelectedForDocument);

                            var userList = {
                                users: data
                            }
                            self.allusers.push(userList);


                            $.each(self.selectedDocuments(),
                                function (index, document) {
                                    var newDocEntry = {
                                        document: document,
                                        users: data
                                    };
                                    var oldDocEntry = ko.utils.arrayFirst(self.usersPerDocument(),
                                        function (item) {
                                            return ko.unwrap(document.Id) === ko.unwrap(item.document.Id);
                                        });
                                    if (!oldDocEntry) {
                                        self.usersPerDocument.push(newDocEntry);
                                    } else {
                                        self.usersPerDocument.replace(oldDocEntry, newDocEntry);
                                    }
                                });
                        });
                    $.when.apply($, promises).then(function () {
                        $('#LoadingImageDiv').hide();
                    });
                //}
            }
            else {
                //console.log('else inside');
                if (self.currentRequest) {
                    self.currentRequest.abort();
                }
                self.usersPerDocument([]);
                self.allusers([]);
                $('#LoadingImageDiv').hide();
                self.isUserGet(false);
            }
        });
        //new code end

        self.allusers = ko.observableArray([]);
        self.allusers.subscribe(function (changes) {
            //console.log("userchanges", changes);
        });

        self.selectedGroups = ko.observableArray([]);
        self.selectedGroups.subscribe(function (changes) {
            $.each(changes,
                function (index, change) {
                    if (change.status === 'deleted') {
                        deselectAllUsersForGroup(change.value.Id());
                    }
                });
            loadUsers();
        },
            null,
            'arrayChange');

        self.selectedCategories = ko.observableArray();
        self.selectedCategories.subscribe(function (changes) {
            self.hasData(false);
        }, null, 'arrayChange');

        $('#categories-multiselect-demo').change(function () {
            console.log("dsadsada ", $(this).val())
            self.data.CategoryId($(this).val());
            checkValidation();
        })
        tree.jstree({
            core: {
                data: {
                    url: '@Url.Action("GetJSTreeDocuments", "Send", new { Area = "" })'
                },
                check_callback: function (operation, node, node_parent, node_position, more) {
                    if (operation === 'move_node') {
                        if (node.text === 'Default') {
                            return false;
                        }
                        if (node.type !== 'default' && node_parent.type === 'default') {
                            if (node_parent.text === 'Category') {
                                return false;
                            }
                            return true;
                        }
                        if (node.type === 'default' && node_parent.type === 'default') {
                            return true;
                        }
                        return false;
                    } else if (operation === 'delete_node') {
                        var descendants = $.map(node.children_d,
                            function(id) {
                                return $('.tree').jstree(true).get_node(id);
                            });
                        if (containsDocument(descendants)) {
                            notif({
                                msg: 'Categories that contain documents cannot be deleted.',
                                type: 'error'
                            });
                            return false;
                        }
                        return true;
                    }
                }
            },
            contextmenu: {

            },
            sort: function(a, b) {
                var n1 = this.get_node(a);
                var n2 = this.get_node(b);

                if (n1.type === 'default' && n1.type === n2.type) { // folders
                    return (n1.text > n2.text) ? 1 : -1;
                } else if (n1.type === 'default' || n2.type === 'default') {
                    return (n1.type !== 'default') ? 1 : -1; // folder first
                } else {
                    return (n1.text > n2.text) ? 1 : -1;
                }
            },
            types: {
                Memo: {
                    icon: 'memo-icon'
                },
                Policy: {
                    icon: 'policy-icon'
                },
                Test: {
                    icon: 'test-icon'
                },
                TrainingManual: {
                    icon: 'training-manual-icon'
                },
                Checklist: {
                    icon: 'checklist-icon'
                },
                default: {
                    icon: 'glyphicon glyphicon-plus-sign category-icon'
                },
            },
            checkbox: {
                "keep_selected_style": false,
            },
            //multiple: false, // disables multiple selection if false
            plugins: ['sort', 'contextmenu', 'types', 'checkbox']
        });

        $(".tree").bind("changed.jstree",
            function (e, data) {
                if (data.selected.length > 0) {
                    console.log("data...", data);
                    if (data.action == "deselect_node") {
                        if (!(data.node.original.isParentNode)) {
                            var index = selectedDocumentsInJSTree.findIndex(el => el.id === data.node.id);
                            if (index != -1) {
                                selectedDocumentsInJSTree.splice(index, 1);
                                self.DocumentsInJSTree.removeAll();
                                ko.utils.arrayForEach(selectedDocumentsInJSTree, function (item) {

                                    self.DocumentsInJSTree.push(item);
                                });
                            }
                        } else {
                            var childNodesInArr = data.node.children_d;
                            for (var i = 0; i < childNodesInArr.length; i++) {
                                var childId = childNodesInArr[i];
                                for (var j = 0; j < selectedDocumentsInJSTree.length; j++) {
                                    if (selectedDocumentsInJSTree[j].id == childId) {
                                        selectedDocumentsInJSTree.splice(j, 1);
                                    }
                                }
                            }
                            self.DocumentsInJSTree.removeAll();
                            ko.utils.arrayForEach(selectedDocumentsInJSTree, function (item) {
                                self.DocumentsInJSTree.push(item);
                            });
                        }
                    } else {
                        if (!(data.node.original.isParentNode)) {
                            var obj = {
                                id: data.node.id,
                                text: data.node.text,
                                type: data.node.type
                            }
                            selectedDocumentsInJSTree.push(obj);
                            ko.utils.arrayForEach(selectedDocumentsInJSTree, function (item) {
                                if (obj.id == item.id) {
                                    self.DocumentsInJSTree.push(item);
                                }
                            });
                            console.log("self.DocumentsInJSTree..", ko.unwrap(self.DocumentsInJSTree));
                        } else {
                            var child_nodes = data.node.children_d;
                            var child_node_arr = [];
                            for (var i = 0; i < child_nodes.length; i++) {
                                var node = {
                                    id: data.node.children_d[i],
                                    text: '',
                                    type:0
                                }
                                selectedDocumentsInJSTree.push(node);
                                child_node_arr.push(node)
                            }
                            ko.utils.arrayForEach(child_node_arr, function (item) {
                               self.DocumentsInJSTree.push(item);
                            });
                            console.log("self.DocumentsInJSTree..", ko.unwrap(self.DocumentsInJSTree));
                        }
                    }
                } else {
                    selectedDocumentsInJSTree = [];
                    self.DocumentsInJSTree.removeAll();
                }
            });
        tree
            .on('open_node.jstree',
                function(event, data) {
                    if (_adjustPageFooter) _adjustPageFooter();
                });

        self.docAssignDate = ko.observable();

        self.documentTypes = ko.observableArray([
            { value: 1, title: 'Training Manual' },
            { value: 2, title: 'Test' },
            { value: 3, title: 'Policy' },
            { value: 4, title: 'Memo' },
            { value: 6, title: 'CheckList' }
        ]);
        self.selectedTypes = ko.observableArray([]);
        self.selectedTypes.subscribe(function(changes) {
                $.each(changes,
                    function(index, change) {
                        if (change.status === 'deleted') {
                            removeDocumentSelectionByType(change.value);
                        }
                    });
            },
            null,
            'arrayChange');

        self.DocumentsInJSTree = ko.observableArray([]);

        self.users = ko.observableArray([]);
        //self.groups = ko.mapping.fromJS(groups);
        //self.documents = ko.mapping.fromJS(documents);

        self.usersPerDocument = ko.observableArray();

        self.query = ko.observable({});


        self._collapseObservable = ko.observable();
        self.toggleCollapse = function(panelBodyId) {
            $(panelBodyId).collapse('toggle');
            self._collapseObservable.notifySubscribers();
        };
        self.panelCollapse = function(panelBodyId) {
            return ko.computed(function () {
                self._collapseObservable();
                return $(panelBodyId).attr('aria-expanded') !== "false" ? 'glyphicon-triangle-bottom' : 'glyphicon-triangle-top';
            });
        };

        self.selectedDocuments = ko.observableArray([]);


        self.document = {
            getType: function(type) {
                switch (type) {
                case 1:
                    return 'Training Manual';
                case 2:
                    return 'Test';
                case 3:
                    return 'Policy';
                case 4:
                        return 'Memo';
                case 6:
                    return 'CheckList';
                default:
                    return '';
                }
            },
            getImage: function (type) {
                 switch (type) {
                     case 1:
                         return '@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.TrainingManualType], true)';
                     case 2:
                        return '@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.TestType], true)';
                    case 3:
                        return '@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.PolicyType], true)';
                    case 4:
                        return '@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.MemoType], true)';
                    case 6:
                        return '@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.CheckListType], true)';
                    default:
                        return '';
                }
            }
        }

        function deselectAllUsers() {
            var usersSelectedForDocument = self.selectedUsersPerDocument();
            self.selectedUsersPerDocument.removeAll(usersSelectedForDocument);
        }


        function loadUsers() {
            if (self.selectedGroups().length === 0 || self.selectedDocuments().length === 0) {
                self.usersPerDocument([]);
                self.allusers([]);
                $('#LoadingImageDiv').hide();
                return;
            }

            var groupIds = $.map(self.selectedGroups(),
                function(group) {
                    return ko.unwrap(group.Id);
                });

            var url = self.selectedAction() === 'Assign'
                ? '@Url.Action("UsersNotAssignedDocument", "Send", new {Area = ""})'
                : '@Url.Action("UsersAssignedDocument", "Send", new {Area = ""})';

            if (self.selectedAction() === 'Reassign') {
                url = '@Url.Action("UsersAssignedDocument", "Send", new {Area = ""})';
            }

            var promises = [];
            var gIds = [];
            $('#LoadingImageDiv').show();
            $.each(self.selectedDocuments(),
                function(index, document) {
                    ids.push(document.id)
                });

            $.ajax({
                method: 'POST',
                url: url,
                data: {
                    documentId: ko.unwrap(document.Id),
                    documentType: ko.unwrap(document.DocumentType),
                    groupIds: ko.unwrap(gIds)
                }
            }).done(function (data) {
                var newDocEntry = {
                    document: document,
                    users: data
                };
                var oldDocEntry = ko.utils.arrayFirst(self.usersPerDocument(),
                    function (item) {
                        return ko.unwrap(document.Id) === ko.unwrap(item.document.Id);
                    });
                if (!oldDocEntry) {
                    self.usersPerDocument.push(newDocEntry);
                } else {
                    self.usersPerDocument.replace(oldDocEntry, newDocEntry);
                }
            });

            $.when.apply($, promises).then(function() {
                $('#LoadingImageDiv').hide();
            });
        }

        function removeDocumentSelectionByType(type) {
            var docsToRemove = [];

            $.each(self.selectedDocuments(),
                function(index, document) {
                    if (document.type === type) {
                        docsToRemove.push(document);
                    }
                });

            self.selectedDocuments.removeAll(docsToRemove);
        }


        function deselectAllUsersForGroup(groupId) {
            var usersSelectedForGroup = $.grep(self.selectedUsersPerDocument(),
                function (item) {
                    return parseDocumentSelection(item).groupId === groupId;
                });

            self.selectedUsersPerDocument.removeAll(usersSelectedForGroup);
        }


       // old code start
        function parseDocumentSelection(item) {
            var split = item.split(';');
            return {
                documentId: split[0],
                documentType: parseInt(split[1]),
                userId: split[2],
                groupId: split[3]
            };
        }
        //old code end

        //new code start
        function selectedDocumentSelection(item) {
            var split = item.split(';');
            return {
                documentId: "",
                documentType: 0,
                userId: split[0],
                groupId: split[1]
            };
        }
        //new code end

    //};

    @*var vm = new Controller(@Html.ToJson(Model), @Html.ToJson((IEnumerable<dynamic>) ViewBag.Groups));*@



    vm.back = function (v, data) {
        console.log("vv ", v);
        $(v).modal('hide');
        console.log("modal ", data);

         if (v == '#assignModal') {
            console.log("1");
             $('#loginmodal1').modal('show');
        }
        else if (v == '#courseSummary') {
            console.log("2");
             $('#assignDocumentToUserModal').modal('show');
        }
        else if (v = '#assignDocumentToUserModal') {
            console.log("3");
             $('#assignModal').modal('show');
         }
    }
    vm.close = (data) => {
        $(data).modal('hide');

        console.log("modal ", data);

        //if (data == '#assignModal') {
        //    console.log("1");
        //     $('#loginmodal1').modal('show');
        //}
        //else if (data == '#courseSummary') {
        //    console.log("2");
        //     $('#assignDocumentToUserModal').modal('show');
        //}
        //else if (data = '#assignDocumentToUserModal') {
        //    console.log("3");
        //     $('#assignModal').modal('show');
        // }
    }

    $("#openCertModal").click(() => {
        $("#certificateModal").modal('show');
    })


    vm.modals = {
        certificate: {
            open: function () {
                $('#certificateModal').modal('show');
            },
            close: function () {
                $('#certificateModal').modal('hide');
            },
            data: new ko.observableArray(),
            initialize: function () {
                console.log("l")
                $.get('/Achievement/List', function (certificates) {
                    app.data.utils.array.sync(certificates, vm.modals.certificate.data);
                });
            },
            set: function (cert) {
                console.log("aaaaaaaaaa ", cert)
                vm.certificates([]);
                vm.certificates.push(cert);
                vm.modals.certificate.close();
            }
        }
    };

    vm.modals.certificate.initialize();

    ko.applyBindings(vm, document.getElementsByTagName('body')[0]);

    function saveCourse() {
        var url = '';

        $.ajax({
            method: 'POST',
            url: url,
            data: {
                documentId: ko.unwrap(document.Id),
                documentType: ko.unwrap(document.DocumentType),
                groupIds: ko.unwrap(gIds)
            }
        }).done(function (data) {
            var newDocEntry = {
                document: document,
                users: data
            };
            var oldDocEntry = ko.utils.arrayFirst(self.usersPerDocument(),
                function (item) {
                    return ko.unwrap(document.Id) === ko.unwrap(item.document.Id);
                });
            if (!oldDocEntry) {
                self.usersPerDocument.push(newDocEntry);
            } else {
                self.usersPerDocument.replace(oldDocEntry, newDocEntry);
            }
        });

        $.when.apply($, promises).then(function () {
            $('#LoadingImageDiv').hide();
        });
    }

    $("#delCert").click(() => {
        vm.certificates([]);
    });
    $(function () {
        $('#users-multiselect-demo').attr("multiple", "multiple").val('');
        $('#users-multiselect-demo').multiselect({
            includeSelectAllOption: true,
            buttonWidth: 350,
            enableFiltering: true,
            maxHeight: 350,
            enableCaseInsensitiveFiltering: true

        });

       // $('#categories-multiselect-demo').attr("multiple", "false").val('');
        $('#categories-multiselect-demo').multiselect({
            includeSelectAllOption: true,
            nonSelectedText: 'None selected',
            buttonWidth: 280,
            enableFiltering: true,
            maxHeight: 350,
            enableCaseInsensitiveFiltering: true
        });
    })
</script>
