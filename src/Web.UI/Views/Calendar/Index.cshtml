
@model Ramp.Contracts.ViewModel.CalendarData
@using Web.UI.Code.Extensions
@using Common.Web
@{
    Layout = "../Shared/_LayoutStandardUser.cshtml";
}
<!DOCTYPE html>
<!--Full Calendar -->
        <script src="~/Scripts/fullcalendar-5.10.0/lib/main.js"></script>
<link href="~/Scripts/fullcalendar-5.10.0/lib/main.css" rel="stylesheet" />

<style>

    .policy-icon {
        background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.PolicyType], true)') !important;
        -ms-background-size: 24px;
        background-size: 24px;
        -ms-background-position: 0 !important;
        background-position: 0 !important;
    background-repeat: no-repeat;
    height: 25px;
    width: 25px;
    }

    .memo-icon {
        background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.MemoType], true)') !important;
        -ms-background-size: 24px;
        background-size: 24px;
        -ms-background-position: 0 !important;
        background-position: 0 !important;
     background-repeat: no-repeat;
    height: 25px;
    width: 25px;
    }
    .test-icon {
        background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.TestType], true)') !important;
        -ms-background-size: 24px;
        background-size: 24px;
        -ms-background-position: 0 !important;
        background-position: 0 !important;
     background-repeat: no-repeat;
    height: 25px;
    width: 25px;
    }
    .training-manual-icon {
        background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.TrainingManualType], true)') !important;
        -ms-background-size: 24px;
        background-size: 24px;
        -ms-background-position: 0 !important;
        background-position: 0 !important;
      background-repeat: no-repeat;
    height: 25px;
    width: 25px;
    }
    .checklist-icon {
        background-image: url('@Url.GetImageFromId(PortalContext.Current.Icons[Domain.Models.IconType.CheckListType], true)') !important;
        -ms-background-size: 24px;
        background-size: 24px;
        -ms-background-position: 0 !important;
        background-position: 0 !important;
    background-repeat: no-repeat;
    height: 25px;
    width: 25px;
    }

    .ran{
    display: flex;
    align-items: center;}
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {

        console.log("dsadsdsad ", @Html.ToJson(Model.Data))

        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            dayMaxEventRows: true, // for all non-TimeGrid views
            views: {
                timeGrid: {
                    dayMaxEventRows: 1 // adjust to 6 only for timeGridWeek/timeGridDay
                }
            },
            @*events: @Html.ToJson(Model.Data),*@
            events: function (fetchInfo, successCallback, failureCallback) {
                let d = @Html.ToJson(Model.Data); let arr = [];

                d.forEach((ele) => {
                    var title;
                    ele.Docs.forEach((xx) => {
                        if (xx.type == 7) {
                            console.log("element ", xx)
                            title = "VitualMeeting Assigned Event "
                        }
                        else if (xx.type != 7) {
                            console.log("what iside element ", xx)
                            title = "Document Assigned Event "
                        }
                    })
                    
                    arr.push({ title: title, start: ele.Date, children: ele.Docs })
                })
                successCallback(arr)
            },
            eventClick: function (info) {
                console.log("asd000 ", info.event._def.extendedProps);

                let title = '';
                let assignedBy = '';
                let createdBy = '';

                info.event._def.extendedProps.children.forEach((ele) => {

                    if (title != '') {
                        title = title + ',' + '<div class="' + ele.className + '"></div>' + ele.title ;
                    } else {
                        title = title + '<div class="' + ele.className + '"></div>' + ele.title;
                    }
                    assignedBy = ele.assignedBy;
                    //createdBy = ele.userName;
                    //if (assignedBy != '') {
                    //    assignedBy = assignedBy + ', '  + ele.assignedBy;
                    //} else {
                    //    assignedBy = assignedBy + ele.assignedBy;
                    //}

                    if (createdBy != '') {
                        createdBy = createdBy + ',' + ele.userName;
                    } else {
                        createdBy = createdBy + ele.userName;
                    }  

                });
                console.log("title before ", title);
                title = title.split(',').filter(function (v, i, self) {
                    return i == self.indexOf(v);
                });
                console.log("title after ", title)

                createdBy = createdBy.split(",").filter(function (v, i, self) {
                    return i == self.indexOf(v);
                });
                console.log("fds ", createdBy)

                let data = '<p>Please see your document assignment details below,</p><br> <span style="font-size:14px;"><b>DOCUMENTS:</b></span><br><div class="ran">' + title + '</div><br><br><span style="font-size:14px;"><b>ASSIGNED TO:</b> </span>' + createdBy + '<br><br> <span style="font-size:14px;"><b>ASSIGNED BY: </span></b>' + assignedBy + '<br><br>'

                let content = '<div class="modal-dialog"> <div class="modal-content"> <div class="modal-header"> <button type="button" class="close" data-dismiss="modal">&times;</button> <h4 class="modal-title">Assignment Details</h4> </div> <div class="modal-body">' + data + '</div> <div class="modal-footer"> <button type="button" class="btn btn-default" data-dismiss="modal">Close</button> </div> </div > </div>'

                $("#myModal").html(content)
                $("#myModal").modal('show');
            }

        });
        calendar.render();
    });

</script>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <div id='calendar'></div>
    <!-- Modal -->
    <div class="modal fade" id="myModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Assignment Details</h4>
                </div>
                <div class="modal-body">

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

</body>
</html>